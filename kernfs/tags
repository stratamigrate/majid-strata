!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC_VERSION_KHASH_H	ds/khash.h	126;"	d
ADDR	ds/bitops_arch.h	132;"	d
ADDR	ds/bitops_arch.h	472;"	d
AGGRESSIVE_TEST_	extents.h	23;"	d
ALIGN	global/util.h	52;"	d
ALIGN	global/util.h	54;"	d
ALIGN_FLOOR	global/util.h	/^static inline unsigned long ALIGN_FLOOR(unsigned long x, int mask)$/;"	f
ALIGN_MASK	global/util.h	56;"	d
ARRAY_SIZE	global/util.h	6;"	d
ASSERT	mlfs/kerncompat.h	355;"	d
ASSERT	mlfs/kerncompat.h	357;"	d
ATOMIC_FLAG_INIT	ds/stdatomic.h	357;"	d
ATOMIC_VAR_INIT	ds/stdatomic.h	88;"	d
ATOMIC_VAR_INIT	ds/stdatomic.h	91;"	d
BANDWIDTH_MONITOR_NS	storage/storage_dax.c	25;"	d	file:
BBLOCK	fs.h	332;"	d
BH_Async_Read	io/buffer_head.h	/^	BH_Async_Read,       \/* Is under end_buffer_async_read I\/O *\/$/;"	e	enum:bh_state_bits
BH_Async_Write	io/buffer_head.h	/^	BH_Async_Write,      \/* Is under end_buffer_async_write I\/O *\/$/;"	e	enum:bh_state_bits
BH_Boundary	io/buffer_head.h	/^	BH_Boundary,	 \/* Block is followed by a discontiguity *\/$/;"	e	enum:bh_state_bits
BH_CACHE_ALLOC	io/block_io.h	26;"	d
BH_DataRef	io/buffer_head.h	/^	BH_DataRef,			\/* b_data has data reference *\/$/;"	e	enum:bh_state_bits
BH_Delay	io/buffer_head.h	/^	BH_Delay,	    \/* Buffer is not yet allocated on disk *\/$/;"	e	enum:bh_state_bits
BH_Dirty	io/buffer_head.h	/^	BH_Dirty,	 \/* Is dirty *\/$/;"	e	enum:bh_state_bits
BH_Eopnotsupp	io/buffer_head.h	/^	BH_Eopnotsupp$/;"	e	enum:bh_state_bits
BH_Lock	io/buffer_head.h	/^	BH_Lock,	  \/* Is locked *\/$/;"	e	enum:bh_state_bits
BH_Mapped	io/buffer_head.h	/^	BH_Mapped,		\/* Has a disk mapping *\/$/;"	e	enum:bh_state_bits
BH_Meta	io/buffer_head.h	/^	BH_Meta,	     \/* Buffer contains metadata *\/$/;"	e	enum:bh_state_bits
BH_NO_DATA_ALLOC	io/block_io.h	27;"	d
BH_New	io/buffer_head.h	/^	BH_New,		     \/* Disk mapping was newly created by get_block *\/$/;"	e	enum:bh_state_bits
BH_Ordered	io/buffer_head.h	/^	BH_Ordered,$/;"	e	enum:bh_state_bits
BH_Pin	io/buffer_head.h	/^	BH_Pin,				\/* Do not evict this buffer *\/$/;"	e	enum:bh_state_bits
BH_PrivateStart	io/buffer_head.h	/^	BH_PrivateStart,     \/* not a state bit, but the first bit available$/;"	e	enum:bh_state_bits
BH_Req	io/buffer_head.h	/^	BH_Req,		  \/* Has been submitted for I\/O *\/$/;"	e	enum:bh_state_bits
BH_Sync_Read	io/buffer_head.h	/^	BH_Sync_Read,       $/;"	e	enum:bh_state_bits
BH_Sync_Write	io/buffer_head.h	/^	BH_Sync_Write,      $/;"	e	enum:bh_state_bits
BH_Uptodate	io/buffer_head.h	/^	BH_Uptodate,      \/* Contains valid data *\/$/;"	e	enum:bh_state_bits
BH_Uptodate_Lock	io/buffer_head.h	/^	BH_Uptodate_Lock, \/* Used by the first bh in a page, to serialise$/;"	e	enum:bh_state_bits
BH_Verified	io/buffer_head.h	/^	BH_Verified,	 \/* Is verified *\/$/;"	e	enum:bh_state_bits
BH_Write_EIO	io/buffer_head.h	/^	BH_Write_EIO,	\/* I\/O error on write *\/$/;"	e	enum:bh_state_bits
BIN	tests/Makefile	/^BIN := kernfs fifo_cli $/;"	m
BIT	ds/bitops.h	12;"	d
BITMAP_FIRST_WORD_MASK	ds/bitmap.h	192;"	d
BITMAP_LAST_WORD_MASK	ds/bitmap.h	193;"	d
BITOP_ADDR	ds/bitops_arch.h	127;"	d
BITOP_ADDR	ds/bitops_arch.h	129;"	d
BITS_PER_BYTE	ds/bitops.h	18;"	d
BITS_PER_LONG	mlfs/kerncompat.h	54;"	d
BITS_TO_LONGS	ds/bitops.h	19;"	d
BIT_64	ds/bitops_arch.h	114;"	d
BIT_MASK	ds/bitops.h	14;"	d
BIT_ULL	ds/bitops.h	13;"	d
BIT_ULL_MASK	ds/bitops.h	16;"	d
BIT_ULL_WORD	ds/bitops.h	17;"	d
BIT_WORD	ds/bitops.h	15;"	d
BLOCKS_PER_LRU_ENTRY	migrate.h	12;"	d
BLOCKS_TO_LRU_ENTRIES	migrate.h	13;"	d
BLOCK_SIZE	storage/spdk/common.h	19;"	d
BLOOM_HEAD	shared.h	315;"	d
BMAP_GET	shared.h	189;"	d
BMAP_GET_NO_ALLOC	shared.h	188;"	d
BMAP_SET	shared.h	190;"	d
BPB	fs.h	329;"	d
BUFFER_FNS	io/buffer_head.h	100;"	d
BUG_ON	extents.c	37;"	d	file:
BUILD_DIR	Makefile	/^BUILD_DIR := $(addprefix build\/, $(SUBDIR))$/;"	m
BYTE	ds/xxhash.c	/^    typedef uint8_t  BYTE;$/;"	t	file:
BYTE	ds/xxhash.c	/^    typedef unsigned char      BYTE;$/;"	t	file:
CC	Makefile	/^CC = gcc$/;"	m
CC	tests/Makefile	/^CC=gcc$/;"	m
CHECK_BINSEARCH__	extents.h	29;"	d
COMPILER_BARRIER	global/defs.h	126;"	d
CONDVAR_NAME_SIZE	concurrency/synchronization.h	45;"	d
CONFIG_EXTENT_TEST	extents.c	24;"	d	file:
CONFIG_X86_64	ds/bitops_arch.h	19;"	d
CONST_MASK	ds/bitops_arch.h	144;"	d
CONST_MASK_ADDR	ds/bitops_arch.h	140;"	d
CONST_MASK_ADDR	ds/bitops_arch.h	142;"	d
CREATE	fs.c	29;"	d	file:
CUCKOO_DIR	Makefile	/^CUCKOO_DIR := $(abspath $(LIBFS_DIR)\/lib\/libcuckoo)$/;"	m
CUCKOO_DIR	tests/Makefile	/^CUCKOO_DIR := $(abspath $(LIBFS_DIR)\/lib\/cuckoofilter)$/;"	m
CUCKOO_FILTER_DIR	Makefile	/^CUCKOO_FILTER_DIR := $(abspath $(LIBFS_DIR)\/lib\/cuckoofilter)$/;"	m
CXX	Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	tests/Makefile	/^CXX=g++ -std=c++11$/;"	m
CYCLE2NS	storage/storage_dax.c	23;"	d	file:
C_SRCS	storage/spdk/Makefile	/^C_SRCS := common.c sync.c async.c$/;"	m
DATA	balloc.h	/^	DATA,	\/\/ allow in-place updates$/;"	e	enum:alloc_type
DATA_LOG	balloc.h	/^	DATA_LOG, \/\/ allow blocks from GCed segment$/;"	e	enum:alloc_type
DEBUG	Makefile	/^DEBUG = -g -O0 $/;"	m
DEBUG	storage/spdk/Makefile	/^DEBUG := -O3$/;"	m
DEBUG	tests/Makefile	/^DEBUG = -g -Ofast$/;"	m
DECLARE_BITMAP	ds/bitmap.h	87;"	d
DECLTYPE	ds/uthash.h	47;"	d
DECLTYPE	ds/uthash.h	50;"	d
DECLTYPE	ds/uthash.h	54;"	d
DECLTYPE	ds/uthash.h	56;"	d
DECLTYPE_ASSIGN	ds/uthash.h	60;"	d
DECLTYPE_ASSIGN	ds/uthash.h	66;"	d
DIRBITMAP_SIZE	shared.h	192;"	d
DIRSIZ	global/global.h	54;"	d
DISABLE_BACKTRACE	mlfs/kerncompat.h	39;"	d
DIV_ROUND_CLOSEST	mlfs/kerncompat.h	343;"	d
DIV_ROUND_UP	mlfs/kerncompat.h	314;"	d
DIV_ROUND_UP_SECTOR_T	mlfs/kerncompat.h	319;"	d
DIV_ROUND_UP_SECTOR_T	mlfs/kerncompat.h	321;"	d
DIV_ROUND_UP_ULL	mlfs/kerncompat.h	315;"	d
DI_INVALID	shared.h	180;"	d
DI_VALID	shared.h	181;"	d
DPDK_DIR	Makefile	/^DPDK_DIR := $(abspath $(LIBFS_DIR)\/lib\/dpdk-16.07\/x86_64-native-linuxapp-gcc)$/;"	m
DPDK_DIR	tests/Makefile	/^DPDK_DIR := $(abspath $(LIBFS_DIR)\/lib\/dpdk-16.07\/x86_64-native-linuxapp-gcc)$/;"	m
DRAM_BANDWIDTH_MB	storage/storage_dax.c	/^uint32_t DRAM_BANDWIDTH_MB = 63000;$/;"	v
EEXIST	ds/rbtree.c	594;"	d	file:
EFSBADCRC	extents.h	40;"	d
EFSCORRUPTED	extents.h	39;"	d
ELMT_FROM_HH	ds/uthash.h	120;"	d
ENABLE_BANDWIDTH_MODEL	storage/storage_dax.c	29;"	d	file:
ENABLE_PERF_MODEL	storage/storage_dax.c	28;"	d	file:
ERR_PTR	mlfs/kerncompat.h	/^static inline void *ERR_PTR(long error)$/;"	f
ET_CHECKSUM_MAGIC	extents.h	61;"	d
EXPORT_SYMBOL	mlfs/kerncompat.h	46;"	d
EXT_EXTENT_SIZE	extents.h	220;"	d
EXT_FIRST_EXTENT	extents.h	223;"	d
EXT_FIRST_INDEX	extents.h	226;"	d
EXT_HAS_FREE_INDEX	extents.h	229;"	d
EXT_INDEX_SIZE	extents.h	221;"	d
EXT_INIT_MAX_LEN	extents.h	217;"	d
EXT_LAST_EXTENT	extents.h	231;"	d
EXT_LAST_INDEX	extents.h	233;"	d
EXT_MAX_BLOCKS	extents.c	300;"	d	file:
EXT_MAX_EXTENT	extents.h	235;"	d
EXT_MAX_INDEX	extents.h	237;"	d
EXT_UNWRITTEN_MAX_LEN	extents.h	218;"	d
ExtentTest	tests/extent_test.cc	/^class ExtentTest$/;"	c	file:
FIELD_SIZEOF	mlfs/kerncompat.h	313;"	d
FORCE_INLINE	ds/xxhash.c	119;"	d	file:
FORCE_INLINE	ds/xxhash.c	123;"	d	file:
FORCE_INLINE	ds/xxhash.c	125;"	d	file:
FORCE_INLINE	ds/xxhash.c	128;"	d	file:
GCC_VERSION	ds/bitops_arch.h	21;"	d
GDB_TRAP	global/defs.h	125;"	d
GENMASK	ds/bitops.h	26;"	d
GENMASK_ULL	ds/bitops.h	29;"	d
GEN_BINARY_RMWcc	ds/bitops_arch.h	58;"	d
GEN_UNARY_RMWcc	ds/bitops_arch.h	55;"	d
GLIB_DIR	Makefile	/^GLIB_DIR := $(abspath $(LIBFS_DIR)\/lib\/glib)$/;"	m
HASH_ADD	ds/uthash.h	327;"	d
HASH_ADD_BYHASHVALUE	ds/uthash.h	324;"	d
HASH_ADD_BYHASHVALUE_INORDER	ds/uthash.h	288;"	d
HASH_ADD_INORDER	ds/uthash.h	291;"	d
HASH_ADD_INT	ds/uthash.h	392;"	d
HASH_ADD_KEYPTR	ds/uthash.h	317;"	d
HASH_ADD_KEYPTR_BYHASHVALUE	ds/uthash.h	294;"	d
HASH_ADD_KEYPTR_BYHASHVALUE_INORDER	ds/uthash.h	243;"	d
HASH_ADD_KEYPTR_INORDER	ds/uthash.h	281;"	d
HASH_ADD_PTR	ds/uthash.h	398;"	d
HASH_ADD_STR	ds/uthash.h	386;"	d
HASH_ADD_TO_BKT	ds/uthash.h	755;"	d
HASH_APPEND_LIST	ds/uthash.h	235;"	d
HASH_BER	ds/uthash.h	489;"	d
HASH_BKT_CAPACITY_THRESH	ds/uthash.h	117;"	d
HASH_BLOOM_ADD	ds/uthash.h	168;"	d
HASH_BLOOM_ADD	ds/uthash.h	177;"	d
HASH_BLOOM_BITLEN	ds/uthash.h	149;"	d
HASH_BLOOM_BITSET	ds/uthash.h	165;"	d
HASH_BLOOM_BITTEST	ds/uthash.h	166;"	d
HASH_BLOOM_BYTELEN	ds/uthash.h	150;"	d
HASH_BLOOM_BYTELEN	ds/uthash.h	179;"	d
HASH_BLOOM_FREE	ds/uthash.h	160;"	d
HASH_BLOOM_FREE	ds/uthash.h	176;"	d
HASH_BLOOM_MAKE	ds/uthash.h	151;"	d
HASH_BLOOM_MAKE	ds/uthash.h	175;"	d
HASH_BLOOM_SIGNATURE	ds/uthash.h	1047;"	d
HASH_BLOOM_TEST	ds/uthash.h	171;"	d
HASH_BLOOM_TEST	ds/uthash.h	178;"	d
HASH_CLEAR	ds/uthash.h	993;"	d
HASH_CNT	ds/uthash.h	1023;"	d
HASH_COUNT	ds/uthash.h	1022;"	d
HASH_DEL	ds/uthash.h	402;"	d
HASH_DELETE	ds/uthash.h	347;"	d
HASH_DEL_IN_BKT	ds/uthash.h	769;"	d
HASH_EMIT_KEY	ds/uthash.h	469;"	d
HASH_EMIT_KEY	ds/uthash.h	476;"	d
HASH_EXPAND_BUCKETS	ds/uthash.h	810;"	d
HASH_FCN	ds/uthash.h	481;"	d
HASH_FCN	ds/uthash.h	485;"	d
HASH_FIND	ds/uthash.h	141;"	d
HASH_FIND_BYHASHVALUE	ds/uthash.h	129;"	d
HASH_FIND_INT	ds/uthash.h	390;"	d
HASH_FIND_IN_BKT	ds/uthash.h	733;"	d
HASH_FIND_PTR	ds/uthash.h	396;"	d
HASH_FIND_STR	ds/uthash.h	384;"	d
HASH_FNV	ds/uthash.h	512;"	d
HASH_FSCK	ds/uthash.h	410;"	d
HASH_FSCK	ds/uthash.h	462;"	d
HASH_INITIAL_NUM_BUCKETS	ds/uthash.h	115;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	ds/uthash.h	116;"	d
HASH_ITER	ds/uthash.h	1012;"	d
HASH_ITER	ds/uthash.h	1016;"	d
HASH_JEN	ds/uthash.h	551;"	d
HASH_JEN_MIX	ds/uthash.h	538;"	d
HASH_MAKE_TABLE	ds/uthash.h	182;"	d
HASH_MUR	ds/uthash.h	694;"	d
HASH_OAT	ds/uthash.h	523;"	d
HASH_OOPS	ds/uthash.h	409;"	d
HASH_OVERHEAD	ds/uthash.h	1004;"	d
HASH_REPLACE	ds/uthash.h	221;"	d
HASH_REPLACE_BYHASHVALUE	ds/uthash.h	211;"	d
HASH_REPLACE_BYHASHVALUE_INORDER	ds/uthash.h	201;"	d
HASH_REPLACE_INORDER	ds/uthash.h	228;"	d
HASH_REPLACE_INT	ds/uthash.h	394;"	d
HASH_REPLACE_PTR	ds/uthash.h	400;"	d
HASH_REPLACE_STR	ds/uthash.h	388;"	d
HASH_SAX	ds/uthash.h	502;"	d
HASH_SELECT	ds/uthash.h	955;"	d
HASH_SFH	ds/uthash.h	602;"	d
HASH_SIGNATURE	ds/uthash.h	1046;"	d
HASH_SORT	ds/uthash.h	862;"	d
HASH_SRT	ds/uthash.h	863;"	d
HASH_TO_BKT	ds/uthash.h	330;"	d
HASH_VALUE	ds/uthash.h	124;"	d
HASH_XXH	ds/uthash.h	645;"	d
HDER	Makefile	/^HDER := $(foreach sdir, $(SRC_DIR), $(wildcard $(sdir)\/*.h))$/;"	m
HEXDUMP_COLS	tests/extent_test.cc	88;"	d	file:
HH_FROM_ELMT	ds/uthash.h	122;"	d
HLIST_HEAD	ds/list.h	617;"	d
HLIST_HEAD_INIT	ds/list.h	613;"	d
HWEIGHT	ds/bitops_arch.h	112;"	d
HWEIGHT16	ds/bitops_arch.h	105;"	d
HWEIGHT32	ds/bitops_arch.h	106;"	d
HWEIGHT64	ds/bitops_arch.h	107;"	d
HWEIGHT8	ds/bitops_arch.h	104;"	d
INCLUDES	Makefile	/^INCLUDES  := $(addprefix -I, . $(LIBSPDK_DIR) $(NVML_DIR)\/include $(CUCKOO_DIR) $(CUCKOO_FILTER_DIR)\/src $(GLIB_DIR)\/ $(GLIB_DIR)\/glib)$/;"	m
INCLUDES	tests/Makefile	/^INCLUDES  := $(addprefix -I, .. . $(LIBSPDK_DIR) $(NVML_DIR)\/include $(CUCKOO_DIR)\/src)$/;"	m
INITIALIZE	balloc.c	357;"	d	file:
INIT_HLIST_HEAD	ds/list.h	618;"	d
INIT_HLIST_NODE	ds/list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	ds/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INNER_IO_SIZE	storage/spdk/async.c	22;"	d	file:
INUM	tests/extent_test.cc	15;"	d	file:
IPB	fs.h	43;"	d
IS_ALIGNED	global/util.h	49;"	d
IS_ERR	mlfs/kerncompat.h	/^static inline long IS_ERR(const void *ptr)$/;"	f
IS_ERR_VALUE	mlfs/kerncompat.h	441;"	d
IS_IMMEDIATE	ds/bitops_arch.h	138;"	d
I_BUSY	shared.h	173;"	d
I_DELETING	shared.h	176;"	d
I_DIRTY	shared.h	175;"	d
I_RESYNC	shared.h	177;"	d
I_VALID	shared.h	174;"	d
JEMALLOC_DIR	Makefile	/^JEMALLOC_DIR := $(abspath $(LIBFS_DIR)\/lib\/jemalloc-4.5.0)$/;"	m
KHASH_DECLARE	ds/khash.h	357;"	d
KHASH_INIT	ds/khash.h	365;"	d
KHASH_INIT2	ds/khash.h	361;"	d
KHASH_MAP_INIT_INT	ds/khash.h	593;"	d
KHASH_MAP_INIT_INT64	ds/khash.h	608;"	d
KHASH_MAP_INIT_STR	ds/khash.h	624;"	d
KHASH_SET_INIT_INT	ds/khash.h	585;"	d
KHASH_SET_INIT_INT64	ds/khash.h	600;"	d
KHASH_SET_INIT_STR	ds/khash.h	616;"	d
LD_FLAGS	Makefile	/^LD_FLAGS = -lpthread -lm -L$(NVML_DIR)\/nondebug\/ -lpmem -lrt$/;"	m
LD_FLAGS	tests/Makefile	/^LD_FLAGS = -lpthread -lm -L$(NVML_DIR)\/nondebug\/ -lpmem -lrt$/;"	m
LD_FLAGS_CXX	tests/Makefile	/^LD_FLAGS_CXX = -lpthread -L$(NVML_DIR)\/nondebug\/ -lpmem -lrt$/;"	m
LH_COMMIT_MAGIC	shared.h	90;"	d
LIBFS_DIR	Makefile	/^LIBFS_DIR := $(CURDIR)\/..\/libfs$/;"	m
LIBFS_DIR	tests/Makefile	/^LIBFS_DIR := $(CURDIR)\/..\/..\/libfs$/;"	m
LIBSPDK_DIR	Makefile	/^LIBSPDK_DIR := $(abspath $(LIBFS_DIR)\/src\/storage\/spdk\/)$/;"	m
LIBSPDK_DIR	tests/Makefile	/^LIBSPDK_DIR := $(abspath $(LIBFS_DIR)\/src\/storage\/spdk\/)$/;"	m
LINUX_DT_BLK	global/types.h	30;"	d
LINUX_DT_CHR	global/types.h	28;"	d
LINUX_DT_DIR	global/types.h	29;"	d
LINUX_DT_FIFO	global/types.h	27;"	d
LINUX_DT_LNK	global/types.h	32;"	d
LINUX_DT_REG	global/types.h	31;"	d
LINUX_DT_SOCK	global/types.h	33;"	d
LINUX_DT_UNKNOWN	global/types.h	26;"	d
LINUX_DT_WHT	global/types.h	34;"	d
LIST_HEAD	ds/list.h	52;"	d
LIST_HEAD_INIT	ds/list.h	47;"	d
LIST_POISON1	ds/list.h	30;"	d
LIST_POISON1	ds/list.h	33;"	d
LIST_POISON2	ds/list.h	31;"	d
LIST_POISON2	ds/list.h	34;"	d
LOCK_BUSY	concurrency/locks.c	5;"	d	file:
LOCK_NAME_SIZE	concurrency/synchronization.h	20;"	d
LOCK_PREFIX	ds/bitops_arch.h	25;"	d
LOG_LEVEL	global/ncx_core.h	22;"	d
LOG_PATH	global/defs.h	14;"	d
LRU_ENTRY_SIZE	slru.h	23;"	d
LRU_HEADS	shared.h	314;"	d
LV_ALERT	global/ncx_log.h	8;"	d
LV_DEBUG	global/ncx_log.h	5;"	d
LV_ERROR	global/ncx_log.h	7;"	d
LV_INFO	global/ncx_log.h	6;"	d
LV_TRACE	global/ncx_log.h	4;"	d
L_TYPE_DIR_ADD	shared.h	82;"	d
L_TYPE_DIR_DEL	shared.h	84;"	d
L_TYPE_DIR_RENAME	shared.h	83;"	d
L_TYPE_FILE	shared.h	87;"	d
L_TYPE_INODE_CREATE	shared.h	85;"	d
L_TYPE_INODE_UPDATE	shared.h	86;"	d
L_TYPE_UNLINK	shared.h	88;"	d
MAXFILE	global/global.h	47;"	d
MAX_BACKTRACE	mlfs/kerncompat.h	57;"	d
MAX_CMD_BUF	shared.h	306;"	d
MAX_ERRNO	mlfs/kerncompat.h	440;"	d
MAX_EVENTS	fs.c	1778;"	d	file:
MAX_FIFO_BUF	tests/fifo_cli.c	7;"	d	file:
MAX_PATH	global/global.h	51;"	d
MAX_SOCK_BUF	shared.h	305;"	d
MEM_MODULE	ds/xxhash.c	527;"	d	file:
MIN_MIGRATE_ENTRY	migrate.h	11;"	d
MLFS_DEP_OBJS	storage/spdk/Makefile	/^MLFS_DEP_OBJS = $(MLFS_DIR)\/..\/build\/global\/util.o$/;"	m
MLFS_DIR	storage/spdk/Makefile	/^MLFS_DIR := $(abspath $(CURDIR)\/..\/..\/)$/;"	m
MLFS_ERROR_INODE	extents.c	29;"	d	file:
MLFS_EXTENT_TAIL_OFFSET	extents.h	99;"	d
MLFS_EXT_DATA_VALID1	extents.c	21;"	d	file:
MLFS_EXT_DATA_VALID2	extents.c	22;"	d	file:
MLFS_EXT_MAGIC	extents.h	97;"	d
MLFS_EXT_MARK_UNWRIT1	extents.c	18;"	d	file:
MLFS_EXT_MARK_UNWRIT2	extents.c	19;"	d	file:
MLFS_EXT_MAY_ZEROOUT	extents.c	15;"	d	file:
MLFS_EX_FORCE_CACHE	extents.h	173;"	d
MLFS_EX_NOCACHE	extents.h	172;"	d
MLFS_FLAGS	Makefile	/^MLFS_FLAGS = -DMLFS_INFO -DKERNFS $/;"	m
MLFS_FREE_BLOCKS_FORGET	extents.h	179;"	d
MLFS_FREE_BLOCKS_METADATA	extents.h	178;"	d
MLFS_FREE_BLOCKS_NOFREE_FIRST_CLUSTER	extents.h	182;"	d
MLFS_FREE_BLOCKS_NOFREE_LAST_CLUSTER	extents.h	183;"	d
MLFS_FREE_BLOCKS_NO_QUOT_UPDATE	extents.h	181;"	d
MLFS_FREE_BLOCKS_VALIDATED	extents.h	180;"	d
MLFS_GET_BLOCKS_CONVERT_UNWRITTEN	extents.h	152;"	d
MLFS_GET_BLOCKS_CREATE	extents.h	136;"	d
MLFS_GET_BLOCKS_CREATE_DATA	extents.h	137;"	d
MLFS_GET_BLOCKS_CREATE_DATA_LOG	extents.h	138;"	d
MLFS_GET_BLOCKS_CREATE_META	extents.h	139;"	d
MLFS_GET_BLOCKS_CREATE_UNWRIT_EXT	extents.h	142;"	d
MLFS_GET_BLOCKS_CREATE_ZERO	extents.h	155;"	d
MLFS_GET_BLOCKS_METADATA_NOFAIL	extents.h	150;"	d
MLFS_GET_BLOCKS_PRE_IO	extents.h	147;"	d
MLFS_GET_BLOCKS_UNWRIT_EXT	extents.h	141;"	d
MLFS_GET_BLOCKS_ZERO	extents.h	154;"	d
MLFS_INFO	global/defs.h	31;"	d
MLFS_MAP_GC_ALLOC	extents.h	187;"	d
MLFS_MAP_LOG_ALLOC	extents.h	186;"	d
MLFS_MAP_NEW	extents.h	185;"	d
MLFS_MB_USE_RESERVED	extents.h	161;"	d
MUR_FMIX	ds/uthash.h	685;"	d
MUR_GETBLOCK	ds/uthash.h	663;"	d
MUR_GETBLOCK	ds/uthash.h	679;"	d
MUR_ONE_THREE	ds/uthash.h	673;"	d
MUR_ONE_THREE	ds/uthash.h	677;"	d
MUR_PLUS0_ALIGNED	ds/uthash.h	665;"	d
MUR_PLUS1_ALIGNED	ds/uthash.h	666;"	d
MUR_PLUS2_ALIGNED	ds/uthash.h	667;"	d
MUR_PLUS3_ALIGNED	ds/uthash.h	668;"	d
MUR_ROTL32	ds/uthash.h	684;"	d
MUR_THREE_ONE	ds/uthash.h	671;"	d
MUR_THREE_ONE	ds/uthash.h	675;"	d
MUR_TWO_TWO	ds/uthash.h	672;"	d
MUR_TWO_TWO	ds/uthash.h	676;"	d
NCX_ALIGNMENT	global/ncx_core.h	19;"	d
NCX_SLAB_BIG	global/ncx_slab.c	6;"	d	file:
NCX_SLAB_BUSY	global/ncx_slab.c	20;"	d	file:
NCX_SLAB_BUSY	global/ncx_slab.c	32;"	d	file:
NCX_SLAB_EXACT	global/ncx_slab.c	7;"	d	file:
NCX_SLAB_MAP_MASK	global/ncx_slab.c	17;"	d	file:
NCX_SLAB_MAP_MASK	global/ncx_slab.c	29;"	d	file:
NCX_SLAB_MAP_SHIFT	global/ncx_slab.c	18;"	d	file:
NCX_SLAB_MAP_SHIFT	global/ncx_slab.c	30;"	d	file:
NCX_SLAB_PAGE	global/ncx_slab.c	5;"	d	file:
NCX_SLAB_PAGE_BUSY	global/ncx_slab.c	13;"	d	file:
NCX_SLAB_PAGE_BUSY	global/ncx_slab.c	25;"	d	file:
NCX_SLAB_PAGE_FREE	global/ncx_slab.c	12;"	d	file:
NCX_SLAB_PAGE_FREE	global/ncx_slab.c	24;"	d	file:
NCX_SLAB_PAGE_MASK	global/ncx_slab.c	4;"	d	file:
NCX_SLAB_PAGE_START	global/ncx_slab.c	14;"	d	file:
NCX_SLAB_PAGE_START	global/ncx_slab.c	26;"	d	file:
NCX_SLAB_SHIFT_MASK	global/ncx_slab.c	16;"	d	file:
NCX_SLAB_SHIFT_MASK	global/ncx_slab.c	28;"	d	file:
NCX_SLAB_SMALL	global/ncx_slab.c	8;"	d	file:
NDIRECT	global/global.h	40;"	d
NELEM	extents.h	372;"	d
NELEM	global/defs.h	136;"	d
NINDIRECT	global/global.h	41;"	d
NINODES	global/global.h	36;"	d
NOCREATE	fs.c	28;"	d	file:
NO_DECLTYPE	ds/uthash.h	49;"	d
NO_DECLTYPE	ds/uthash.h	53;"	d
NO_INITIALIZE	balloc.c	356;"	d	file:
NO_OF_CHARS	global/util.c	63;"	d	file:
NS2CYCLE	storage/storage_dax.c	22;"	d	file:
NTYPE_D	fs.c	65;"	d	file:
NTYPE_F	fs.c	66;"	d	file:
NTYPE_I	fs.c	64;"	d	file:
NTYPE_U	fs.c	67;"	d	file:
NVML_DIR	Makefile	/^NVML_DIR := $(abspath $(LIBFS_DIR)\/lib\/nvml\/src)$/;"	m
NVML_DIR	tests/Makefile	/^NVML_DIR := $(abspath $(LIBFS_DIR)\/lib\/nvml\/src)$/;"	m
N_FILE_PER_DIR	global/global.h	43;"	d
OBJ	Makefile	/^OBJ	:= $(patsubst %.c,build\/%.o,$(SRC))$/;"	m
OBJS	storage/spdk/Makefile	/^OBJS=$(C_SRCS:.c=.o)$/;"	m
O_CREATE	global/fcntl.h	4;"	d
O_RDONLY	global/fcntl.h	1;"	d
O_RDWR	global/fcntl.h	3;"	d
O_WRONLY	global/fcntl.h	2;"	d
PAGE_MERGE	global/ncx_core.h	23;"	d
PERSISTENT_BARRIER	storage/storage_dax.c	/^static inline void PERSISTENT_BARRIER(void)$/;"	f	file:
PRIME32_1	ds/xxhash.c	/^static const U32 PRIME32_1 = 2654435761U;$/;"	v	file:
PRIME32_2	ds/xxhash.c	/^static const U32 PRIME32_2 = 2246822519U;$/;"	v	file:
PRIME32_3	ds/xxhash.c	/^static const U32 PRIME32_3 = 3266489917U;$/;"	v	file:
PRIME32_4	ds/xxhash.c	/^static const U32 PRIME32_4 =  668265263U;$/;"	v	file:
PRIME32_5	ds/xxhash.c	/^static const U32 PRIME32_5 =  374761393U;$/;"	v	file:
PRIME64_1	ds/xxhash.c	/^static const U64 PRIME64_1 = 11400714785074694791ULL;$/;"	v	file:
PRIME64_2	ds/xxhash.c	/^static const U64 PRIME64_2 = 14029467366897019727ULL;$/;"	v	file:
PRIME64_3	ds/xxhash.c	/^static const U64 PRIME64_3 =  1609587929392839161ULL;$/;"	v	file:
PRIME64_4	ds/xxhash.c	/^static const U64 PRIME64_4 =  9650029242287828579ULL;$/;"	v	file:
PRIME64_5	ds/xxhash.c	/^static const U64 PRIME64_5 =  2870177450012600261ULL;$/;"	v	file:
PTR_ERR	mlfs/kerncompat.h	/^static inline long PTR_ERR(const void *ptr)$/;"	f
Q_DEPTH	storage/spdk/async.c	15;"	d	file:
RANGENODE_PER_PAGE	shared.h	15;"	d
RB_BLACK	ds/rbtree_augmented.h	97;"	d
RB_CLEAR_NODE	ds/rbtree.h	60;"	d
RB_DECLARE_CALLBACKS	ds/rbtree_augmented.h	62;"	d
RB_EMPTY_NODE	ds/rbtree.h	58;"	d
RB_EMPTY_ROOT	ds/rbtree.h	55;"	d
RB_RED	ds/rbtree_augmented.h	96;"	d
RB_ROOT	ds/rbtree.h	52;"	d
RB_TREE_LATCH_H	ds/rbtree_latch.h	33;"	d
READ	io/buffer_head.h	13;"	d
READ	mlfs/kerncompat.h	49;"	d
READA	mlfs/kerncompat.h	51;"	d
READ_ONCE	mlfs/kerncompat.h	543;"	d
READ_ONCE_NOCHECK	mlfs/kerncompat.h	548;"	d
REG_OP_ALLOC	ds/bitmap.c	/^	REG_OP_ALLOC,		\/* set all bits in region *\/$/;"	e	enum:__anon10	file:
REG_OP_ISFREE	ds/bitmap.c	/^	REG_OP_ISFREE,		\/* true if region is all zero bits *\/$/;"	e	enum:__anon10	file:
REG_OP_RELEASE	ds/bitmap.c	/^	REG_OP_RELEASE,		\/* clear all bits in region *\/$/;"	e	enum:__anon10	file:
ROOTINO	global/global.h	38;"	d
SCM_BANDWIDTH_MB	storage/storage_dax.c	/^uint32_t SCM_BANDWIDTH_MB = 8000;$/;"	v
SCM_EXTRA_READ_LATENCY_NS	storage/storage_dax.c	/^uint32_t SCM_EXTRA_READ_LATENCY_NS = 150;$/;"	v
SCM_WBARRIER_LATENCY_NS	storage/storage_dax.c	/^uint32_t SCM_WBARRIER_LATENCY_NS = 0;$/;"	v
SEC_TO_NS	storage/storage_dax.c	26;"	d	file:
SHARED_PARTITION	balloc.c	6;"	d	file:
SHM_NAME	global/global.h	58;"	d
SHM_SIZE	global/global.h	57;"	d
SHM_START_ADDR	global/global.h	56;"	d
SPDK_DIR	Makefile	/^SPDK_DIR := $(abspath $(LIBFS_DIR)\/lib\/spdk)$/;"	m
SPDK_DIR	tests/Makefile	/^SPDK_DIR := $(abspath $(LIBFS_DIR)\/lib\/spdk)$/;"	m
SPDK_ROOT_DIR	storage/spdk/Makefile	/^SPDK_ROOT_DIR := $(abspath $(CURDIR)\/..\/..\/..\/lib\/spdk\/)$/;"	m
SPIN_TRY_COUNT	concurrency/locks.c	56;"	d	file:
SRC	Makefile	/^SRC	:= $(foreach sdir, $(SRC_DIR), $(wildcard $(sdir)\/*.c))$/;"	m
SRC	Makefile	/^SRC := $(filter-out %mkfs.c %kernf.c,$(SRC))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR   := $(addprefix , $(SUBDIR))$/;"	m
SRV_SOCK_PATH	shared.h	303;"	d
STORAGE_ENGINE	Makefile	/^STORAGE_ENGINE := $(wildcard $(LIBFS_DIR)\/build\/storage\/*.o)$/;"	m
SUBDIR	Makefile	/^SUBDIR	:= io cache concurrency global ds mlfs storage .$/;"	m
TAS_BUFFER_FNS	io/buffer_head.h	117;"	d
THPOOL_DEBUG	thpool.c	26;"	d	file:
THPOOL_DEBUG	thpool.c	28;"	d	file:
TREE	balloc.h	/^	TREE = 1,$/;"	e	enum:alloc_type
TYPEOF	global/util.h	11;"	d
TYPEOF	global/util.h	9;"	d
TYPEOF	mlfs/kerncompat.h	462;"	d
TYPEOF	mlfs/kerncompat.h	464;"	d
T_DEV	shared.h	185;"	d
T_DIR	shared.h	183;"	d
T_FILE	shared.h	184;"	d
U16	ds/xxhash.c	/^    typedef uint16_t U16;$/;"	t	file:
U16	ds/xxhash.c	/^    typedef unsigned short     U16;$/;"	t	file:
U32	ds/xxhash.c	/^    typedef uint32_t U32;$/;"	t	file:
U32	ds/xxhash.c	/^    typedef unsigned int       U32;$/;"	t	file:
U64	ds/xxhash.c	/^    typedef uint64_t U64;$/;"	t	file:
U64	ds/xxhash.c	/^    typedef unsigned long long U64;   \/* if your compiler doesn't support unsigned long long, replace by another 64-bit type here. Note that xxhash.h will also need to be updated. *\/$/;"	t	file:
UNUSED	mlfs/kerncompat.h	84;"	d
UTARRAY_H	ds/utarray.h	27;"	d
UTARRAY_VERSION	ds/utarray.h	29;"	d
UTHASH_H	ds/uthash.h	25;"	d
UTHASH_VERSION	ds/uthash.h	27;"	d
UT_array	ds/utarray.h	/^} UT_array;$/;"	t	typeref:struct:__anon9
UT_hash_bucket	ds/uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	ds/uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	ds/uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	ds/uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	ds/uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	ds/uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
UT_icd	ds/utarray.h	/^} UT_icd;$/;"	t	typeref:struct:__anon8
WP	ds/uthash.h	669;"	d
WRITE	io/buffer_head.h	14;"	d
WRITE	mlfs/kerncompat.h	50;"	d
WRITE_ONCE	mlfs/kerncompat.h	550;"	d
XSTR	global/defs.h	70;"	d
XXH32	ds/xxhash.c	/^XXH_PUBLIC_API unsigned int XXH32 (const void* input, size_t len, unsigned int seed)$/;"	f
XXH32	ds/xxhash.h	126;"	d
XXH32_canonicalFromHash	ds/xxhash.c	/^XXH_PUBLIC_API void XXH32_canonicalFromHash(XXH32_canonical_t* dst, XXH32_hash_t hash)$/;"	f
XXH32_canonicalFromHash	ds/xxhash.h	133;"	d
XXH32_canonical_t	ds/xxhash.h	/^typedef struct { unsigned char digest[4]; } XXH32_canonical_t;$/;"	t	typeref:struct:__anon12
XXH32_copyState	ds/xxhash.c	/^XXH_PUBLIC_API void XXH32_copyState(XXH32_state_t* dstState, const XXH32_state_t* srcState)$/;"	f
XXH32_copyState	ds/xxhash.h	132;"	d
XXH32_createState	ds/xxhash.c	/^XXH_PUBLIC_API XXH32_state_t* XXH32_createState(void)$/;"	f
XXH32_createState	ds/xxhash.h	127;"	d
XXH32_digest	ds/xxhash.c	/^XXH_PUBLIC_API unsigned int XXH32_digest (const XXH32_state_t* state_in)$/;"	f
XXH32_digest	ds/xxhash.h	131;"	d
XXH32_digest_endian	ds/xxhash.c	/^FORCE_INLINE U32 XXH32_digest_endian (const XXH32_state_t* state, XXH_endianess endian)$/;"	f
XXH32_endian_align	ds/xxhash.c	/^FORCE_INLINE U32 XXH32_endian_align(const void* input, size_t len, U32 seed, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH32_freeState	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_freeState(XXH32_state_t* statePtr)$/;"	f
XXH32_freeState	ds/xxhash.h	128;"	d
XXH32_hashFromCanonical	ds/xxhash.c	/^XXH_PUBLIC_API XXH32_hash_t XXH32_hashFromCanonical(const XXH32_canonical_t* src)$/;"	f
XXH32_hashFromCanonical	ds/xxhash.h	134;"	d
XXH32_hash_t	ds/xxhash.h	/^typedef unsigned int XXH32_hash_t;$/;"	t
XXH32_reset	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_reset(XXH32_state_t* statePtr, unsigned int seed)$/;"	f
XXH32_reset	ds/xxhash.h	129;"	d
XXH32_round	ds/xxhash.c	/^static U32 XXH32_round(U32 seed, U32 input)$/;"	f	file:
XXH32_state_s	ds/xxhash.h	/^struct XXH32_state_s {$/;"	s
XXH32_state_t	ds/xxhash.h	/^typedef struct XXH32_state_s XXH32_state_t;   \/* incomplete type *\/$/;"	t	typeref:struct:XXH32_state_s
XXH32_update	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH32_update (XXH32_state_t* state_in, const void* input, size_t len)$/;"	f
XXH32_update	ds/xxhash.h	130;"	d
XXH32_update_endian	ds/xxhash.c	/^FORCE_INLINE XXH_errorcode XXH32_update_endian (XXH32_state_t* state, const void* input, size_t len, XXH_endianess endian)$/;"	f
XXH64	ds/xxhash.c	/^XXH_PUBLIC_API unsigned long long XXH64 (const void* input, size_t len, unsigned long long seed)$/;"	f
XXH64	ds/xxhash.h	135;"	d
XXH64_canonicalFromHash	ds/xxhash.c	/^XXH_PUBLIC_API void XXH64_canonicalFromHash(XXH64_canonical_t* dst, XXH64_hash_t hash)$/;"	f
XXH64_canonicalFromHash	ds/xxhash.h	142;"	d
XXH64_canonical_t	ds/xxhash.h	/^typedef struct { unsigned char digest[8]; } XXH64_canonical_t;$/;"	t	typeref:struct:__anon13
XXH64_copyState	ds/xxhash.c	/^XXH_PUBLIC_API void XXH64_copyState(XXH64_state_t* dstState, const XXH64_state_t* srcState)$/;"	f
XXH64_copyState	ds/xxhash.h	141;"	d
XXH64_createState	ds/xxhash.c	/^XXH_PUBLIC_API XXH64_state_t* XXH64_createState(void)$/;"	f
XXH64_createState	ds/xxhash.h	136;"	d
XXH64_digest	ds/xxhash.c	/^XXH_PUBLIC_API unsigned long long XXH64_digest (const XXH64_state_t* state_in)$/;"	f
XXH64_digest	ds/xxhash.h	140;"	d
XXH64_digest_endian	ds/xxhash.c	/^FORCE_INLINE U64 XXH64_digest_endian (const XXH64_state_t* state, XXH_endianess endian)$/;"	f
XXH64_endian_align	ds/xxhash.c	/^FORCE_INLINE U64 XXH64_endian_align(const void* input, size_t len, U64 seed, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH64_freeState	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_freeState(XXH64_state_t* statePtr)$/;"	f
XXH64_freeState	ds/xxhash.h	137;"	d
XXH64_hashFromCanonical	ds/xxhash.c	/^XXH_PUBLIC_API XXH64_hash_t XXH64_hashFromCanonical(const XXH64_canonical_t* src)$/;"	f
XXH64_hashFromCanonical	ds/xxhash.h	143;"	d
XXH64_hash_t	ds/xxhash.h	/^typedef unsigned long long XXH64_hash_t;$/;"	t
XXH64_mergeRound	ds/xxhash.c	/^static U64 XXH64_mergeRound(U64 acc, U64 val)$/;"	f	file:
XXH64_reset	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_reset(XXH64_state_t* statePtr, unsigned long long seed)$/;"	f
XXH64_reset	ds/xxhash.h	138;"	d
XXH64_round	ds/xxhash.c	/^static U64 XXH64_round(U64 acc, U64 input)$/;"	f	file:
XXH64_state_s	ds/xxhash.h	/^struct XXH64_state_s {$/;"	s
XXH64_state_t	ds/xxhash.h	/^typedef struct XXH64_state_s XXH64_state_t;   \/* incomplete type *\/$/;"	t	typeref:struct:XXH64_state_s
XXH64_update	ds/xxhash.c	/^XXH_PUBLIC_API XXH_errorcode XXH64_update (XXH64_state_t* state_in, const void* input, size_t len)$/;"	f
XXH64_update	ds/xxhash.h	139;"	d
XXH64_update_endian	ds/xxhash.c	/^FORCE_INLINE XXH_errorcode XXH64_update_endian (XXH64_state_t* state, const void* input, size_t len, XXH_endianess endian)$/;"	f
XXHASH_H_5627135585666179	ds/xxhash.h	68;"	d
XXH_CAT	ds/xxhash.h	123;"	d
XXH_CPU_LITTLE_ENDIAN	ds/xxhash.c	213;"	d	file:
XXH_ERROR	ds/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon11
XXH_FORCE_ALIGN_CHECK	ds/xxhash.c	91;"	d	file:
XXH_FORCE_ALIGN_CHECK	ds/xxhash.c	93;"	d	file:
XXH_FORCE_MEMORY_ACCESS	ds/xxhash.c	56;"	d	file:
XXH_FORCE_MEMORY_ACCESS	ds/xxhash.c	59;"	d	file:
XXH_FORCE_NATIVE_FORMAT	ds/xxhash.c	79;"	d	file:
XXH_GCC_VERSION	ds/xxhash.c	179;"	d	file:
XXH_NAME2	ds/xxhash.h	124;"	d
XXH_OK	ds/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	e	enum:__anon11
XXH_PRIVATE_API	ds/uthash.h	36;"	d
XXH_PUBLIC_API	ds/xxhash.h	101;"	d
XXH_PUBLIC_API	ds/xxhash.h	103;"	d
XXH_PUBLIC_API	ds/xxhash.h	105;"	d
XXH_PUBLIC_API	ds/xxhash.h	108;"	d
XXH_PUBLIC_API	ds/xxhash.h	99;"	d
XXH_STATIC_ASSERT	ds/xxhash.c	244;"	d	file:
XXH_STATIC_LINKING_ONLY	ds/xxhash.c	110;"	d	file:
XXH_STATIC_LINKING_ONLY	ds/xxhash.h	96;"	d
XXH_VERSION_MAJOR	ds/xxhash.h	150;"	d
XXH_VERSION_MINOR	ds/xxhash.h	151;"	d
XXH_VERSION_NUMBER	ds/xxhash.h	153;"	d
XXH_VERSION_RELEASE	ds/xxhash.h	152;"	d
XXH_aligned	ds/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	e	enum:__anon6	file:
XXH_alignment	ds/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	t	typeref:enum:__anon6	file:
XXH_bigEndian	ds/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	e	enum:__anon5	file:
XXH_endianess	ds/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	t	typeref:enum:__anon5	file:
XXH_errorcode	ds/xxhash.h	/^typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;$/;"	t	typeref:enum:__anon11
XXH_free	ds/xxhash.c	/^static void  XXH_free  (void* p)  { mlfs_free(p); }$/;"	f	file:
XXH_get32bits	ds/xxhash.c	270;"	d	file:
XXH_get64bits	ds/xxhash.c	630;"	d	file:
XXH_littleEndian	ds/xxhash.c	/^typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;$/;"	e	enum:__anon5	file:
XXH_malloc	ds/xxhash.c	/^static void* XXH_malloc(size_t s) { return mlfs_alloc(s); }$/;"	f	file:
XXH_memcpy	ds/xxhash.c	/^static void* XXH_memcpy(void* dest, const void* src, size_t size) { return memcpy(dest,src,size); }$/;"	f	file:
XXH_read32	ds/xxhash.c	/^static U32 XXH_read32(const void* memPtr) { return *(const U32*) memPtr; }$/;"	f	file:
XXH_read32	ds/xxhash.c	/^static U32 XXH_read32(const void* memPtr)$/;"	f	file:
XXH_read32	ds/xxhash.c	/^static U32 XXH_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }$/;"	f	file:
XXH_read64	ds/xxhash.c	/^static U64 XXH_read64(const void* memPtr) { return *(const U64*) memPtr; }$/;"	f	file:
XXH_read64	ds/xxhash.c	/^static U64 XXH_read64(const void* memPtr)$/;"	f	file:
XXH_read64	ds/xxhash.c	/^static U64 XXH_read64(const void* ptr) { return ((const unalign64*)ptr)->u64; }$/;"	f	file:
XXH_readBE32	ds/xxhash.c	/^static U32 XXH_readBE32(const void* ptr)$/;"	f	file:
XXH_readBE64	ds/xxhash.c	/^static U64 XXH_readBE64(const void* ptr)$/;"	f	file:
XXH_readLE32	ds/xxhash.c	/^FORCE_INLINE U32 XXH_readLE32(const void* ptr, XXH_endianess endian)$/;"	f
XXH_readLE32_align	ds/xxhash.c	/^FORCE_INLINE U32 XXH_readLE32_align(const void* ptr, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH_readLE64	ds/xxhash.c	/^FORCE_INLINE U64 XXH_readLE64(const void* ptr, XXH_endianess endian)$/;"	f
XXH_readLE64_align	ds/xxhash.c	/^FORCE_INLINE U64 XXH_readLE64_align(const void* ptr, XXH_endianess endian, XXH_alignment align)$/;"	f
XXH_rotl32	ds/xxhash.c	183;"	d	file:
XXH_rotl32	ds/xxhash.c	186;"	d	file:
XXH_rotl64	ds/xxhash.c	184;"	d	file:
XXH_rotl64	ds/xxhash.c	187;"	d	file:
XXH_swap32	ds/xxhash.c	/^static U32 XXH_swap32 (U32 x)$/;"	f	file:
XXH_swap32	ds/xxhash.c	191;"	d	file:
XXH_swap32	ds/xxhash.c	193;"	d	file:
XXH_swap64	ds/xxhash.c	/^static U64 XXH_swap64 (U64 x)$/;"	f	file:
XXH_swap64	ds/xxhash.c	565;"	d	file:
XXH_swap64	ds/xxhash.c	567;"	d	file:
XXH_unaligned	ds/xxhash.c	/^typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;$/;"	e	enum:__anon6	file:
XXH_versionNumber	ds/xxhash.c	/^XXH_PUBLIC_API unsigned XXH_versionNumber (void) { return XXH_VERSION_NUMBER; }$/;"	f
XXH_versionNumber	ds/xxhash.h	125;"	d
_ASM_X86_BITOPS_H	ds/bitops_arch.h	2;"	d
_Atomic	ds/stdatomic.h	80;"	d
_BALLOC_H_	balloc.h	2;"	d
_BITOPS_LONG_SHIFT	ds/bitops_arch.h	62;"	d
_BITOPS_LONG_SHIFT	ds/bitops_arch.h	64;"	d
_BLOCK_IO_H_	io/block_io.h	2;"	d
_BUFFER_HEAD_H_	io/buffer_head.h	2;"	d
_CPUFREQ	storage/storage_dax.c	20;"	d	file:
_DEFS_H_	global/defs.h	2;"	d
_DEVICE_H_	io/device.h	2;"	d
_EXTENTS_BH_H	extents_bh.h	2;"	d
_FS_H_	fs.h	2;"	d
_GNU_SOURCE	balloc.c	1;"	d	file:
_INODE_H_	shared.h	2;"	d
_KERN_FS_INTERFACE_	kernfs_interface.h	2;"	d
_LINUX_BITOPS_H	ds/bitops.h	2;"	d
_LINUX_BITREV_H	ds/bitrev.h	2;"	d
_LINUX_LIST_H	ds/list.h	2;"	d
_LINUX_RBTREE_AUGMENTED_H	ds/rbtree_augmented.h	25;"	d
_LINUX_RBTREE_H	ds/rbtree.h	30;"	d
_MEM_H_	global/mem.h	2;"	d
_MIGRATE_H_	migrate.h	2;"	d
_MLFS_INTERFACE_H_	mlfs/mlfs_interface.h	2;"	d
_NCX_CORE_H_	global/ncx_core.h	2;"	d
_NCX_LOCK_H_	global/ncx_lock.h	2;"	d
_NCX_LOG_H_	global/ncx_log.h	2;"	d
_NCX_SLAB_H_INCLUDED_	global/ncx_slab.h	2;"	d
_NEW_BTREE_H	extents.h	2;"	d
_POSIX_C_SOURCE	thpool.c	11;"	d	file:
_SLRU_H_	slru.h	2;"	d
_STDATOMIC_H_	ds/stdatomic.h	49;"	d
_STORAGE_H_	storage/storage.h	2;"	d
_SYNC_H_	concurrency/synchronization.h	2;"	d
_THPOOL_	thpool.h	8;"	d
_THREAD_H_	concurrency/thread.h	2;"	d
_TYPES_H_	global/types.h	2;"	d
_UNUSED_	ds/utarray.h	/^static const UT_icd ut_int_icd _UNUSED_ = {sizeof(int),NULL,NULL,NULL};$/;"	v
_UNUSED_	ds/utarray.h	/^static const UT_icd ut_ptr_icd _UNUSED_ = {sizeof(void*),NULL,NULL,NULL};$/;"	v
_UNUSED_	ds/utarray.h	/^static const UT_icd ut_str_icd _UNUSED_ = {sizeof(char*),NULL,utarray_str_cpy,utarray_str_dtor};$/;"	v
_UNUSED_	ds/utarray.h	32;"	d
_UNUSED_	ds/utarray.h	34;"	d
_UTIL_H_	global/util.h	2;"	d
__AC_KHASH_H	ds/khash.h	118;"	d
__ALIGN_MASK	ds/bitmap.h	194;"	d
__ATOMIC_ACQUIRE	ds/stdatomic.h	110;"	d
__ATOMIC_ACQ_REL	ds/stdatomic.h	116;"	d
__ATOMIC_CONSUME	ds/stdatomic.h	107;"	d
__ATOMIC_RELAXED	ds/stdatomic.h	104;"	d
__ATOMIC_RELEASE	ds/stdatomic.h	113;"	d
__ATOMIC_SEQ_CST	ds/stdatomic.h	119;"	d
__CLANG_ATOMICS	ds/stdatomic.h	71;"	d
__GEN_RMWcc	ds/bitops_arch.h	46;"	d
__GNUC_ATOMICS	ds/stdatomic.h	73;"	d
__GNUC_PREREQ__	ds/stdatomic.h	62;"	d
__GNUC_PREREQ__	ds/stdatomic.h	65;"	d
__KERNCOMPAT	mlfs/kerncompat.h	20;"	d
__KERNEL_DIV_ROUND_UP	mlfs/kerncompat.h	311;"	d
__KHASH_IMPL	ds/khash.h	211;"	d
__KHASH_PROTOTYPES	ds/khash.h	202;"	d
__KHASH_TYPE	ds/khash.h	194;"	d
__LINUX_BITMAP_H	ds/bitmap.h	2;"	d
__READ_ONCE	mlfs/kerncompat.h	534;"	d
__READ_ONCE_SIZE	mlfs/kerncompat.h	471;"	d
____rb_erase_color	ds/rbtree.c	/^____rb_erase_color(struct rb_node *parent, struct rb_root *root,$/;"	f	file:
__ac_HASH_UPPER	ds/khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v
__ac_Wang_hash	ds/khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f
__ac_X31_hash_string	ds/khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f
__ac_fsize	ds/khash.h	173;"	d
__ac_isdel	ds/khash.h	166;"	d
__ac_iseither	ds/khash.h	167;"	d
__ac_isempty	ds/khash.h	165;"	d
__ac_set_isboth_false	ds/khash.h	170;"	d
__ac_set_isdel_false	ds/khash.h	168;"	d
__ac_set_isdel_true	ds/khash.h	171;"	d
__ac_set_isempty_false	ds/khash.h	169;"	d
__be16	mlfs/kerncompat.h	/^typedef u16 __be16;$/;"	t
__be32	mlfs/kerncompat.h	/^typedef u32 __be32;$/;"	t
__be64	mlfs/kerncompat.h	/^typedef u64 __be64;$/;"	t
__bitmap_and	ds/bitmap.c	/^int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,$/;"	f
__bitmap_andnot	ds/bitmap.c	/^int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,$/;"	f
__bitmap_bits_clr	balloc.c	/^static inline void __bitmap_bits_clr(struct block_bitmap *b_bitmap,$/;"	f	file:
__bitmap_complement	ds/bitmap.c	/^void __bitmap_complement(unsigned long *dst, const unsigned long *src, unsigned int bits)$/;"	f
__bitmap_equal	ds/bitmap.c	/^int __bitmap_equal(const unsigned long *bitmap1,$/;"	f
__bitmap_intersects	ds/bitmap.c	/^int __bitmap_intersects(const unsigned long *bitmap1,$/;"	f
__bitmap_or	ds/bitmap.c	/^void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,$/;"	f
__bitmap_shift_left	ds/bitmap.c	/^void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,$/;"	f
__bitmap_shift_right	ds/bitmap.c	/^void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,$/;"	f
__bitmap_subset	ds/bitmap.c	/^int __bitmap_subset(const unsigned long *bitmap1,$/;"	f
__bitmap_weight	ds/bitmap.c	/^int __bitmap_weight(const unsigned long *bitmap, unsigned int bits)$/;"	f
__bitmap_xor	ds/bitmap.c	/^void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,$/;"	f
__bitrev16	ds/bitrev.h	/^static inline u16 __bitrev16(u16 x)$/;"	f
__bitrev16	ds/bitrev.h	14;"	d
__bitrev32	ds/bitrev.h	/^static inline u32 __bitrev32(u32 x)$/;"	f
__bitrev32	ds/bitrev.h	13;"	d
__bitrev8	ds/bitrev.h	/^static inline u8 __bitrev8(u8 byte)$/;"	f
__bitrev8	ds/bitrev.h	15;"	d
__buffer_remove	io/block_io.c	/^static void __buffer_remove(struct block_device *bdev,$/;"	f	file:
__buffer_search	extents.c	/^static struct inode *__buffer_search(struct rb_root *root,$/;"	f	file:
__buffer_search	io/block_io.c	/^static struct buffer_head *__buffer_search(struct rb_root *root,$/;"	f	file:
__change_bit	ds/bitops_arch.h	/^static __always_inline void __change_bit(long nr, volatile unsigned long *addr)$/;"	f
__clear_bit	ds/bitops_arch.h	/^static __always_inline void __clear_bit(long nr, volatile unsigned long *addr)$/;"	f
__clear_bit_unlock	ds/bitops_arch.h	/^static __always_inline void __clear_bit_unlock(long nr, volatile unsigned long *addr)$/;"	f
__const_hweight16	ds/bitops_arch.h	83;"	d
__const_hweight32	ds/bitops_arch.h	84;"	d
__const_hweight64	ds/bitops_arch.h	85;"	d
__const_hweight8	ds/bitops_arch.h	72;"	d
__constant_bitrev16	ds/bitrev.h	47;"	d
__constant_bitrev32	ds/bitrev.h	36;"	d
__constant_bitrev8	ds/bitrev.h	57;"	d
__ffs	ds/bitops_arch.h	/^static __always_inline unsigned long __ffs(unsigned long word)$/;"	f
__ffs64	ds/bitops.h	/^static inline unsigned long __ffs64(u64 word)$/;"	f
__fls	ds/bitops_arch.h	/^static __always_inline unsigned long __fls(unsigned long word)$/;"	f
__force	mlfs/kerncompat.h	467;"	d
__getblk	io/block_io.c	/^struct buffer_head *__getblk(struct block_device *bdev, uint64_t block,$/;"	f
__global_h__	global/global.h	2;"	d
__has_builtin	ds/stdatomic.h	58;"	d
__has_feature	ds/stdatomic.h	55;"	d
__hlist_del	ds/list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__le16	mlfs/kerncompat.h	/^typedef u16 __le16;$/;"	t
__le32	mlfs/kerncompat.h	/^typedef u32 __le32;$/;"	t
__le64	mlfs/kerncompat.h	/^typedef u64 __le64;$/;"	t
__le8	mlfs/kerncompat.h	385;"	d
__libspdk_async_h__	storage/spdk/async.h	2;"	d
__libspdk_h__	storage/spdk/common.h	2;"	d
__libspdk_sync_h__	storage/spdk/sync.h	2;"	d
__list_add	ds/list.h	/^static inline void __list_add(struct list_head *_new, struct list_head *prev,$/;"	f
__list_cut_position	ds/list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	ds/list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_del_entry	ds/list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__list_splice	ds/list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
__lt_erase	ds/rbtree_latch.h	/^__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)$/;"	f
__lt_find	ds/rbtree_latch.h	/^__lt_find(void *key, struct latch_tree_root *ltr, int idx,$/;"	f
__lt_from_rb	ds/rbtree_latch.h	/^__lt_from_rb(struct rb_node *node, int idx)$/;"	f
__lt_insert	ds/rbtree_latch.h	/^__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,$/;"	f
__mlfs_ext_dirty	extents.c	/^int __mlfs_ext_dirty(const char *where, unsigned int line,$/;"	f
__rb_change_child	ds/rbtree_augmented.h	/^__rb_change_child(struct rb_node *old, struct rb_node *_new,$/;"	f
__rb_color	ds/rbtree_augmented.h	101;"	d
__rb_erase_augmented	ds/rbtree_augmented.h	/^__rb_erase_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
__rb_erase_color	ds/rbtree.c	/^EXPORT_SYMBOL(__rb_erase_color);$/;"	v
__rb_erase_color	ds/rbtree.c	/^void __rb_erase_color(struct rb_node *parent, struct rb_root *root,$/;"	f
__rb_insert	ds/rbtree.c	/^__rb_insert(struct rb_node *node, struct rb_root *root,$/;"	f	file:
__rb_insert_augmented	ds/rbtree.c	/^EXPORT_SYMBOL(__rb_insert_augmented);$/;"	v
__rb_insert_augmented	ds/rbtree.c	/^void __rb_insert_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
__rb_is_black	ds/rbtree_augmented.h	102;"	d
__rb_is_red	ds/rbtree_augmented.h	103;"	d
__rb_parent	ds/rbtree_augmented.h	99;"	d
__rb_parent_color	ds/rbtree.h	/^	unsigned long  __rb_parent_color;$/;"	m	struct:rb_node
__rb_rotate_set_parents	ds/rbtree.c	/^__rb_rotate_set_parents(struct rb_node *old, struct rb_node *_new,$/;"	f	file:
__read_once_size	mlfs/kerncompat.h	/^void __read_once_size(const volatile void *p, void *res, int size)$/;"	f
__read_once_size_nocheck	mlfs/kerncompat.h	/^void __read_once_size_nocheck(const volatile void *p, void *res, int size)$/;"	f
__reg_op	ds/bitmap.c	/^static int __reg_op(unsigned long *bitmap, unsigned int pos, int order, int reg_op)$/;"	f	file:
__round_mask	mlfs/kerncompat.h	307;"	d
__s16	mlfs/kerncompat.h	/^typedef __signed__ short __s16;$/;"	t
__s32	mlfs/kerncompat.h	/^typedef __signed__ int __s32;$/;"	t
__s64	mlfs/kerncompat.h	/^typedef __signed__ long long __s64;$/;"	t
__s8	mlfs/kerncompat.h	/^typedef __signed__ char __s8;$/;"	t
__set_bit	ds/bitops_arch.h	/^static __always_inline void __set_bit(long nr, volatile unsigned long *addr)$/;"	f
__submit_bh	io/block_io.c	/^int __submit_bh(int is_write, struct buffer_head *bh)$/;"	f
__test_and_change_bit	ds/bitops_arch.h	/^static __always_inline int __test_and_change_bit(long nr, volatile unsigned long *addr)$/;"	f
__test_and_clear_bit	ds/bitops_arch.h	/^static __always_inline int __test_and_clear_bit(long nr, volatile unsigned long *addr)$/;"	f
__test_and_set_bit	ds/bitops_arch.h	/^static __always_inline int __test_and_set_bit(long nr, volatile unsigned long *addr)$/;"	f
__u16	mlfs/kerncompat.h	/^typedef unsigned short __u16;$/;"	t
__u32	mlfs/kerncompat.h	/^typedef unsigned int __u32;$/;"	t
__u64	mlfs/kerncompat.h	/^typedef unsigned long long __u64;$/;"	t
__u8	mlfs/kerncompat.h	/^typedef unsigned char __u8;$/;"	t
__una_u16	mlfs/kerncompat.h	/^struct __una_u16 { __le16 x; } __attribute__((__packed__));$/;"	s
__una_u32	mlfs/kerncompat.h	/^struct __una_u32 { __le32 x; } __attribute__((__packed__));$/;"	s
__una_u64	mlfs/kerncompat.h	/^struct __una_u64 { __le64 x; } __attribute__((__packed__));$/;"	s
__write_once_size	mlfs/kerncompat.h	/^static __always_inline void __write_once_size(volatile void *p, void *res, int size)$/;"	f
_dinode	shared.h	/^	struct dinode *_dinode;$/;"	m	struct:inode	typeref:struct:inode::dinode
_find_next_bit	ds/bitmap.c	/^static unsigned long _find_next_bit(const unsigned long *addr,$/;"	f	file:
_min	fs.c	23;"	d	file:
_panic	global/util.c	/^void _panic()$/;"	f
_utarray_eltptr	ds/utarray.h	121;"	d
add_buffer_to_ioqueue	io/block_io.c	/^static void add_buffer_to_ioqueue(struct buffer_head *bh)$/;"	f	file:
addr	global/ncx_slab.h	/^	void *addr;$/;"	m	struct:__anon14
addr_t	global/types.h	/^typedef uint64_t		addr_t;$/;"	t
addrs	shared.h	/^		addr_t addrs[NDIRECT+1];    \/\/ Data block addresses$/;"	m	union:inode::__anon1
addrs	shared.h	/^		addr_t addrs[NDIRECT+1];    \/\/ Data block addresses$/;"	m	union:inode::__anon2
addrs	shared.h	/^		addr_t addrs[NDIRECT+1];    \/\/ Data block addresses$/;"	m	union:inode::__anon3
after_buffer_sync	io/block_io.c	/^void after_buffer_sync(struct buffer_head *bh, int uptodate)$/;"	f
after_buffer_write	io/block_io.c	/^void after_buffer_write(struct buffer_head *bh, int uptodate)$/;"	f
after_submit_read	io/block_io.c	/^void after_submit_read(struct buffer_head *bh, int uptodate)$/;"	f
alert	global/ncx_log.h	22;"	d
alloc_data_count	shared.h	/^	unsigned long   alloc_data_count;$/;"	m	struct:free_list
alloc_data_pages	shared.h	/^	unsigned long   alloc_data_pages;$/;"	m	struct:free_list
alloc_log_count	shared.h	/^	unsigned long   alloc_log_count;$/;"	m	struct:free_list
alloc_log_pages	shared.h	/^	unsigned long   alloc_log_pages;$/;"	m	struct:free_list
alloc_type	balloc.h	/^enum alloc_type {$/;"	g
apply_time_tsc	fs.h	/^	uint64_t apply_time_tsc;$/;"	m	struct:mlfs_kernfs_stats
arg	thpool.c	/^	void*  arg;                          \/* function's argument       *\/$/;"	m	struct:job	file:
asm_rdtsc	global/util.h	/^static inline unsigned long long asm_rdtsc(void)$/;"	f
asm_rdtscp	global/util.h	/^static inline unsigned long long asm_rdtscp(void)$/;"	f
assert_trace	mlfs/kerncompat.h	/^static inline void assert_trace(const char *assertion, const char *filename,$/;"	f
async_data	storage/spdk/async.c	/^} async_data;$/;"	v	typeref:struct:spdk_async_data	file:
async_io_test	tests/extent_test.cc	/^void ExtentTest::async_io_test(void)$/;"	f	class:ExtentTest
atime	shared.h	/^	mlfs_time_t atime;$/;"	m	struct:dinode
atime	shared.h	/^	mlfs_time_t atime;$/;"	m	struct:inode
atomic_add	concurrency/synchronization.h	91;"	d
atomic_bitsetandtest	concurrency/synchronization.h	/^static inline char atomic_bitsetandtest(void *ptr, int x)$/;"	f
atomic_bool	ds/stdatomic.h	/^typedef _Atomic(_Bool)			atomic_bool;$/;"	t
atomic_char	ds/stdatomic.h	/^typedef _Atomic(char)			atomic_char;$/;"	t
atomic_clear_bit	concurrency/synchronization.h	93;"	d
atomic_compare_exchange_strong	ds/stdatomic.h	328;"	d
atomic_compare_exchange_strong_explicit	ds/stdatomic.h	223;"	d
atomic_compare_exchange_strong_explicit	ds/stdatomic.h	248;"	d
atomic_compare_exchange_strong_explicit	ds/stdatomic.h	273;"	d
atomic_compare_exchange_weak	ds/stdatomic.h	331;"	d
atomic_compare_exchange_weak_explicit	ds/stdatomic.h	227;"	d
atomic_compare_exchange_weak_explicit	ds/stdatomic.h	252;"	d
atomic_compare_exchange_weak_explicit	ds/stdatomic.h	284;"	d
atomic_dec	concurrency/synchronization.h	90;"	d
atomic_exchange	ds/stdatomic.h	334;"	d
atomic_exchange_explicit	ds/stdatomic.h	231;"	d
atomic_exchange_explicit	ds/stdatomic.h	256;"	d
atomic_exchange_explicit	ds/stdatomic.h	290;"	d
atomic_exchange_explicit	ds/stdatomic.h	298;"	d
atomic_fetch_add	ds/stdatomic.h	336;"	d
atomic_fetch_add_explicit	ds/stdatomic.h	233;"	d
atomic_fetch_add_explicit	ds/stdatomic.h	258;"	d
atomic_fetch_add_explicit	ds/stdatomic.h	305;"	d
atomic_fetch_and	ds/stdatomic.h	338;"	d
atomic_fetch_and_explicit	ds/stdatomic.h	235;"	d
atomic_fetch_and_explicit	ds/stdatomic.h	260;"	d
atomic_fetch_and_explicit	ds/stdatomic.h	307;"	d
atomic_fetch_or	ds/stdatomic.h	340;"	d
atomic_fetch_or_explicit	ds/stdatomic.h	237;"	d
atomic_fetch_or_explicit	ds/stdatomic.h	262;"	d
atomic_fetch_or_explicit	ds/stdatomic.h	309;"	d
atomic_fetch_sub	ds/stdatomic.h	342;"	d
atomic_fetch_sub_explicit	ds/stdatomic.h	239;"	d
atomic_fetch_sub_explicit	ds/stdatomic.h	264;"	d
atomic_fetch_sub_explicit	ds/stdatomic.h	311;"	d
atomic_fetch_xor	ds/stdatomic.h	344;"	d
atomic_fetch_xor_explicit	ds/stdatomic.h	241;"	d
atomic_fetch_xor_explicit	ds/stdatomic.h	266;"	d
atomic_fetch_xor_explicit	ds/stdatomic.h	313;"	d
atomic_flag	ds/stdatomic.h	/^typedef atomic_bool			atomic_flag;$/;"	t
atomic_flag_clear	ds/stdatomic.h	364;"	d
atomic_flag_clear_explicit	ds/stdatomic.h	359;"	d
atomic_flag_test_and_set	ds/stdatomic.h	366;"	d
atomic_flag_test_and_set_explicit	ds/stdatomic.h	361;"	d
atomic_inc	concurrency/synchronization.h	89;"	d
atomic_init	ds/stdatomic.h	89;"	d
atomic_init	ds/stdatomic.h	92;"	d
atomic_int	ds/stdatomic.h	/^typedef _Atomic(int)			atomic_int;$/;"	t
atomic_int_fast16_t	ds/stdatomic.h	/^typedef _Atomic(int_fast16_t)		atomic_int_fast16_t;$/;"	t
atomic_int_fast32_t	ds/stdatomic.h	/^typedef _Atomic(int_fast32_t)		atomic_int_fast32_t;$/;"	t
atomic_int_fast64_t	ds/stdatomic.h	/^typedef _Atomic(int_fast64_t)		atomic_int_fast64_t;$/;"	t
atomic_int_fast8_t	ds/stdatomic.h	/^typedef _Atomic(int_fast8_t)		atomic_int_fast8_t;$/;"	t
atomic_int_least16_t	ds/stdatomic.h	/^typedef _Atomic(int_least16_t)		atomic_int_least16_t;$/;"	t
atomic_int_least32_t	ds/stdatomic.h	/^typedef _Atomic(int_least32_t)		atomic_int_least32_t;$/;"	t
atomic_int_least64_t	ds/stdatomic.h	/^typedef _Atomic(int_least64_t)		atomic_int_least64_t;$/;"	t
atomic_int_least8_t	ds/stdatomic.h	/^typedef _Atomic(int_least8_t)		atomic_int_least8_t;$/;"	t
atomic_intmax_t	ds/stdatomic.h	/^typedef _Atomic(intmax_t)		atomic_intmax_t;$/;"	t
atomic_intptr_t	ds/stdatomic.h	/^typedef _Atomic(intptr_t)		atomic_intptr_t;$/;"	t
atomic_is_lock_free	ds/stdatomic.h	160;"	d
atomic_is_lock_free	ds/stdatomic.h	163;"	d
atomic_is_lock_free	ds/stdatomic.h	166;"	d
atomic_llong	ds/stdatomic.h	/^typedef _Atomic(long long)		atomic_llong;$/;"	t
atomic_load	ds/stdatomic.h	346;"	d
atomic_load_explicit	ds/stdatomic.h	243;"	d
atomic_load_explicit	ds/stdatomic.h	268;"	d
atomic_load_explicit	ds/stdatomic.h	315;"	d
atomic_long	ds/stdatomic.h	/^typedef _Atomic(long)			atomic_long;$/;"	t
atomic_ptrdiff_t	ds/stdatomic.h	/^typedef _Atomic(ptrdiff_t)		atomic_ptrdiff_t;$/;"	t
atomic_schar	ds/stdatomic.h	/^typedef _Atomic(signed char)		atomic_schar;$/;"	t
atomic_set_bit	concurrency/synchronization.h	92;"	d
atomic_short	ds/stdatomic.h	/^typedef _Atomic(short)			atomic_short;$/;"	t
atomic_signal_fence	ds/stdatomic.h	146;"	d
atomic_signal_fence	ds/stdatomic.h	149;"	d
atomic_signal_fence	ds/stdatomic.h	152;"	d
atomic_size_t	ds/stdatomic.h	/^typedef _Atomic(size_t)			atomic_size_t;$/;"	t
atomic_store	ds/stdatomic.h	348;"	d
atomic_store_explicit	ds/stdatomic.h	245;"	d
atomic_store_explicit	ds/stdatomic.h	270;"	d
atomic_store_explicit	ds/stdatomic.h	317;"	d
atomic_t	io/buffer_head.h	/^typedef int atomic_t;$/;"	t
atomic_thread_fence	ds/stdatomic.h	145;"	d
atomic_thread_fence	ds/stdatomic.h	148;"	d
atomic_thread_fence	ds/stdatomic.h	151;"	d
atomic_uchar	ds/stdatomic.h	/^typedef _Atomic(unsigned char)		atomic_uchar;$/;"	t
atomic_uint	ds/stdatomic.h	/^typedef _Atomic(unsigned int)		atomic_uint;$/;"	t
atomic_uint_fast16_t	ds/stdatomic.h	/^typedef _Atomic(uint_fast16_t)		atomic_uint_fast16_t;$/;"	t
atomic_uint_fast32_t	ds/stdatomic.h	/^typedef _Atomic(uint_fast32_t)		atomic_uint_fast32_t;$/;"	t
atomic_uint_fast64_t	ds/stdatomic.h	/^typedef _Atomic(uint_fast64_t)		atomic_uint_fast64_t;$/;"	t
atomic_uint_fast8_t	ds/stdatomic.h	/^typedef _Atomic(uint_fast8_t)		atomic_uint_fast8_t;$/;"	t
atomic_uint_least16_t	ds/stdatomic.h	/^typedef _Atomic(uint_least16_t)		atomic_uint_least16_t;$/;"	t
atomic_uint_least32_t	ds/stdatomic.h	/^typedef _Atomic(uint_least32_t)		atomic_uint_least32_t;$/;"	t
atomic_uint_least64_t	ds/stdatomic.h	/^typedef _Atomic(uint_least64_t)		atomic_uint_least64_t;$/;"	t
atomic_uint_least8_t	ds/stdatomic.h	/^typedef _Atomic(uint_least8_t)		atomic_uint_least8_t;$/;"	t
atomic_uintmax_t	ds/stdatomic.h	/^typedef _Atomic(uintmax_t)		atomic_uintmax_t;$/;"	t
atomic_uintptr_t	ds/stdatomic.h	/^typedef _Atomic(uintptr_t)		atomic_uintptr_t;$/;"	t
atomic_ullong	ds/stdatomic.h	/^typedef _Atomic(unsigned long long)	atomic_ullong;$/;"	t
atomic_ulong	ds/stdatomic.h	/^typedef _Atomic(unsigned long)		atomic_ulong;$/;"	t
atomic_ushort	ds/stdatomic.h	/^typedef _Atomic(unsigned short)		atomic_ushort;$/;"	t
atomic_wchar_t	ds/stdatomic.h	/^typedef _Atomic(wchar_t)		atomic_wchar_t;$/;"	t
atomic_xadd	concurrency/synchronization.h	87;"	d
attach_bh_to_freelist	io/block_io.c	/^static void attach_bh_to_freelist(struct buffer_head *bh)$/;"	f	file:
attach_cb	storage/spdk/common.c	/^void attach_cb(void *cb_ctx, const struct spdk_nvme_transport_id *trid,$/;"	f
b	concurrency/synchronization.h	/^	}b;$/;"	m	union:mlfs_mutex	typeref:struct:mlfs_mutex::state
b_bdev	io/buffer_head.h	/^	struct block_device *b_bdev;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::block_device
b_big	global/ncx_slab.h	/^	size_t b_small, b_exact, b_big, b_page; $/;"	m	struct:__anon15
b_blocknr	io/buffer_head.h	/^	addr_t b_blocknr;	\/* start block number *\/$/;"	m	struct:buffer_head
b_count	io/buffer_head.h	/^	atomic_t b_count; \/* users using this buffer_head *\/$/;"	m	struct:buffer_head
b_data	io/buffer_head.h	/^	uint8_t *b_data;       \/* pointer to data within the page *\/$/;"	m	struct:buffer_head
b_dev	balloc.h	/^	struct block_device *b_dev;$/;"	m	struct:block_bitmap	typeref:struct:block_bitmap::block_device
b_dev	io/buffer_head.h	/^	uint8_t b_dev;$/;"	m	struct:buffer_head
b_devid	io/device.h	/^	uint8_t b_devid ;$/;"	m	struct:block_device
b_dirty_list	io/buffer_head.h	/^	struct list_head b_dirty_list;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::list_head
b_end_io	io/buffer_head.h	/^	bh_end_io_t *b_end_io; \/* I\/O completion *\/$/;"	m	struct:buffer_head
b_exact	global/ncx_slab.h	/^	size_t b_small, b_exact, b_big, b_page; $/;"	m	struct:__anon15
b_freelist	io/buffer_head.h	/^	struct list_head b_freelist;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::list_head
b_io_list	io/buffer_head.h	/^	struct list_head b_io_list;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::list_head
b_lock	io/buffer_head.h	/^	pthread_mutex_t b_lock;$/;"	m	struct:buffer_head
b_offset	io/buffer_head.h	/^	uint32_t b_offset;	\/* offset in a block (used for unaligned write) *\/$/;"	m	struct:buffer_head
b_page	global/ncx_slab.h	/^	size_t b_small, b_exact, b_big, b_page; $/;"	m	struct:__anon15
b_rb_node	io/buffer_head.h	/^	struct rb_node b_rb_node;$/;"	m	struct:buffer_head	typeref:struct:buffer_head::rb_node
b_size	io/buffer_head.h	/^	uint32_t b_size;	\/* size of mapping *\/$/;"	m	struct:buffer_head
b_small	global/ncx_slab.h	/^	size_t b_small, b_exact, b_big, b_page; $/;"	m	struct:__anon15
b_state	io/buffer_head.h	/^	unsigned long b_state; \/* buffer state bitmap (see above) *\/$/;"	m	struct:buffer_head
b_wait_mutex	io/buffer_head.h	/^	pthread_mutex_t b_wait_mutex;$/;"	m	struct:buffer_head
bad_char_heuristic	global/util.c	/^void bad_char_heuristic(char *str, int size, int badchar[NO_OF_CHARS])$/;"	f
balloc_init	balloc.c	/^void balloc_init(uint8_t dev, struct super_block *_sb)$/;"	f
bandwidth_consumption	storage/storage_dax.c	/^uint64_t *bandwidth_consumption;$/;"	v
barrier	ds/bitops_arch.h	29;"	d
barrier	mlfs/kerncompat.h	469;"	d
barrier_data	ds/bitops_arch.h	44;"	d
base	shared.h	/^	uint8_t *base;$/;"	m	struct:io_vec
base_addr	storage/storage_ramdisk.c	/^static uint8_t *base_addr[g_n_devices + 1];$/;"	v	file:
bcache_rwlock	io/block_io.c	/^pthread_rwlock_t *bcache_rwlock;$/;"	v
bd_bh_dirty	io/device.h	/^	struct list_head bd_bh_dirty;$/;"	m	struct:block_device	typeref:struct:block_device::list_head
bd_bh_dirty_lock	io/device.h	/^	pthread_mutex_t bd_bh_dirty_lock;$/;"	m	struct:block_device
bd_bh_free	io/device.h	/^	struct list_head bd_bh_free;$/;"	m	struct:block_device	typeref:struct:block_device::list_head
bd_bh_free_lock	io/device.h	/^	pthread_mutex_t bd_bh_free_lock;$/;"	m	struct:block_device
bd_bh_io_thread	io/device.h	/^	pthread_t bd_bh_io_thread;$/;"	m	struct:block_device
bd_bh_io_wakeup_fd	io/device.h	/^	int bd_bh_io_wakeup_fd[2];$/;"	m	struct:block_device
bd_bh_ioqueue	io/device.h	/^	struct list_head bd_bh_ioqueue;$/;"	m	struct:block_device	typeref:struct:block_device::list_head
bd_bh_ioqueue_lock	io/device.h	/^	pthread_mutex_t bd_bh_ioqueue_lock;$/;"	m	struct:block_device
bd_bh_root	io/device.h	/^	struct rb_root bd_bh_root;$/;"	m	struct:block_device	typeref:struct:block_device::rb_root
bd_bh_root_lock	io/device.h	/^	pthread_mutex_t bd_bh_root_lock;$/;"	m	struct:block_device
bd_bh_writeback_thread	io/device.h	/^	pthread_t bd_bh_writeback_thread;$/;"	m	struct:block_device
bd_bh_writeback_wakeup_fd	io/device.h	/^	int bd_bh_writeback_wakeup_fd[2];$/;"	m	struct:block_device
bd_blocksize	io/device.h	/^	uint32_t bd_blocksize;$/;"	m	struct:block_device
bd_blocksize_bits	io/device.h	/^	uint32_t bd_blocksize_bits;$/;"	m	struct:block_device
bd_flags	io/device.h	/^	unsigned long bd_flags; \/* flags *\/$/;"	m	struct:block_device
bd_nr_free	io/device.h	/^	int bd_nr_free;$/;"	m	struct:block_device
bdev_alloc	io/block_io.c	/^struct block_device *bdev_alloc(uint8_t dev_id, int blocksize_bits)$/;"	f
bdev_alloc_fast	io/block_io.c	/^struct block_device *bdev_alloc_fast(uint8_t dev_id, int blocksize_bits)$/;"	f
bdev_free	io/block_io.c	/^void bdev_free(struct block_device *bdev)$/;"	f
bdev_io_thread_notify	io/block_io.c	/^static void bdev_io_thread_notify(struct block_device *bdev)$/;"	f	file:
bdev_io_thread_notify_exit	io/block_io.c	/^static void bdev_io_thread_notify_exit(struct block_device *bdev)$/;"	f	file:
bdev_io_thread_read_notify	io/block_io.c	/^static signed char bdev_io_thread_read_notify(struct block_device *bdev)$/;"	f	file:
bdev_is_notify_exiting	io/block_io.c	/^static int bdev_is_notify_exiting(signed char byte)$/;"	f	file:
bdev_writeback_thread_notify	io/block_io.c	/^static void bdev_writeback_thread_notify(struct block_device *bdev)$/;"	f	file:
bdev_writeback_thread_notify_exit	io/block_io.c	/^static void bdev_writeback_thread_notify_exit(struct block_device *bdev)$/;"	f	file:
bdev_writeback_thread_read_notify	io/block_io.c	/^static signed char bdev_writeback_thread_read_notify(struct block_device *bdev)$/;"	f	file:
bh_alloc_add	io/block_io.c	/^static inline struct buffer_head *bh_alloc_add(uint8_t dev,$/;"	f	file:
bh_del	io/block_io.h	/^static inline void *bh_del(struct buffer_head *bh)$/;"	f
bh_end_io_t	io/buffer_head.h	/^typedef void(bh_end_io_t)(struct buffer_head *, int);$/;"	t
bh_find	io/block_io.h	/^static inline struct buffer_head *bh_find(block_key_t key)$/;"	f
bh_get_sync_IO	io/block_io.c	/^struct buffer_head *bh_get_sync_IO(uint8_t dev, addr_t block_nr, uint8_t mode)$/;"	f
bh_hash	io/block_io.c	/^struct buffer_head *bh_hash[g_n_devices + 1];$/;"	v	typeref:struct:buffer_head
bh_release	io/block_io.c	/^void bh_release(struct buffer_head *bh)$/;"	f
bh_state_bits	io/buffer_head.h	/^enum bh_state_bits {$/;"	g
bh_submit_read	io/block_io.c	/^int bh_submit_read(struct buffer_head *bh)$/;"	f
bh_submit_read_sync_IO	io/block_io.c	/^int bh_submit_read_sync_IO(struct buffer_head *bh)$/;"	f
bh_t	io/buffer_head.h	/^typedef struct buffer_head  bh_t;$/;"	t	typeref:struct:buffer_head
bit_clear_unless	ds/bitops.h	228;"	d
bitmap	balloc.h	/^	uint8_t *bitmap;$/;"	m	struct:block_bitmap
bitmap_allocate_region	ds/bitmap.c	/^int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order)$/;"	f
bitmap_and	ds/bitmap.h	/^static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,$/;"	f
bitmap_andnot	ds/bitmap.h	/^static inline int bitmap_andnot(unsigned long *dst, const unsigned long *src1,$/;"	f
bitmap_bitremap	ds/bitmap.c	/^int bitmap_bitremap(int oldbit, const unsigned long *old,$/;"	f
bitmap_bits_clr	balloc.c	/^void bitmap_bits_clr(struct block_bitmap *b_bitmap, mlfs_fsblk_t bit)$/;"	f
bitmap_bits_free	balloc.c	/^void bitmap_bits_free(struct block_bitmap *b_bitmap, $/;"	f
bitmap_bits_set	balloc.c	/^void bitmap_bits_set(struct block_bitmap *b_bitmap, mlfs_fsblk_t bit)$/;"	f
bitmap_bits_set_range	balloc.c	/^void bitmap_bits_set_range(struct block_bitmap *b_bitmap, mlfs_fsblk_t bit, $/;"	f
bitmap_block	balloc.h	/^	mlfs_fsblk_t bitmap_block;$/;"	m	struct:block_bitmap
bitmap_clear	ds/bitmap.c	/^void bitmap_clear(unsigned long *map, unsigned int start, int len)$/;"	f
bitmap_complement	ds/bitmap.h	/^static inline void bitmap_complement(unsigned long *dst, const unsigned long *src,$/;"	f
bitmap_copy	ds/bitmap.h	/^static inline void bitmap_copy(unsigned long *dst, const unsigned long *src,$/;"	f
bitmap_count	balloc.h	/^	int bitmap_count;$/;"	m	struct:block_bitmap
bitmap_desc	balloc.h	/^	struct block_bitmap_desc *bitmap_desc;$/;"	m	struct:block_bitmap	typeref:struct:block_bitmap::block_bitmap_desc
bitmap_empty	ds/bitmap.h	/^static inline int bitmap_empty(const unsigned long *src, unsigned nbits)$/;"	f
bitmap_equal	ds/bitmap.h	/^static inline int bitmap_equal(const unsigned long *src1,$/;"	f
bitmap_fill	ds/bitmap.h	/^static inline void bitmap_fill(unsigned long *dst, unsigned int nbits)$/;"	f
bitmap_find_bits_clr	balloc.c	/^int bitmap_find_bits_clr(struct block_bitmap *b_bitmap, mlfs_fsblk_t bit, $/;"	f
bitmap_find_free_region	ds/bitmap.c	/^int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order)$/;"	f
bitmap_find_next_clr	balloc.c	/^int bitmap_find_next_clr(struct block_bitmap *b_bitmap, mlfs_fsblk_t start_bit, $/;"	f
bitmap_find_next_contiguous_clr	balloc.c	/^int bitmap_find_next_contiguous_clr(struct block_bitmap *b_bitmap, $/;"	f
bitmap_find_next_zero_area	ds/bitmap.h	/^bitmap_find_next_zero_area(unsigned long *map,$/;"	f
bitmap_find_next_zero_area_off	ds/bitmap.c	/^unsigned long bitmap_find_next_zero_area_off(unsigned long *map,$/;"	f
bitmap_fold	ds/bitmap.c	/^void bitmap_fold(unsigned long *dst, const unsigned long *orig,$/;"	f
bitmap_from_u32array	ds/bitmap.c	/^bitmap_from_u32array(unsigned long *bitmap, unsigned int nbits,$/;"	f
bitmap_full	ds/bitmap.h	/^static inline int bitmap_full(const unsigned long *src, unsigned int nbits)$/;"	f
bitmap_intersects	ds/bitmap.h	/^static inline int bitmap_intersects(const unsigned long *src1,$/;"	f
bitmap_is_bit_clr	balloc.c	/^static inline bool bitmap_is_bit_clr(uint8_t *bitmap, mlfs_fsblk_t bit)$/;"	f	file:
bitmap_is_bit_set	balloc.c	/^static inline bool bitmap_is_bit_set(uint8_t *bitmap, mlfs_fsblk_t bit)$/;"	f	file:
bitmap_onto	ds/bitmap.c	/^void bitmap_onto(unsigned long *dst, const unsigned long *orig,$/;"	f
bitmap_or	ds/bitmap.h	/^static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,$/;"	f
bitmap_ord_to_pos	ds/bitmap.c	/^unsigned int bitmap_ord_to_pos(const unsigned long *buf, unsigned int ord, unsigned int nbits)$/;"	f
bitmap_parse	ds/bitmap.h	/^static inline int bitmap_parse(const char *buf, unsigned int buflen,$/;"	f
bitmap_pos_to_ord	ds/bitmap.c	/^static int bitmap_pos_to_ord(const unsigned long *buf, unsigned int pos, unsigned int nbits)$/;"	f	file:
bitmap_release_region	ds/bitmap.c	/^void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order)$/;"	f
bitmap_remap	ds/bitmap.c	/^void bitmap_remap(unsigned long *dst, const unsigned long *src,$/;"	f
bitmap_set	ds/bitmap.c	/^void bitmap_set(unsigned long *map, unsigned int start, int len)$/;"	f
bitmap_shift_left	ds/bitmap.h	/^static inline void bitmap_shift_left(unsigned long *dst, const unsigned long *src,$/;"	f
bitmap_shift_right	ds/bitmap.h	/^static inline void bitmap_shift_right(unsigned long *dst, const unsigned long *src,$/;"	f
bitmap_subset	ds/bitmap.h	/^static inline int bitmap_subset(const unsigned long *src1,$/;"	f
bitmap_to_u32array	ds/bitmap.c	/^bitmap_to_u32array(u32 *buf, unsigned int nwords,$/;"	f
bitmap_weight	ds/bitmap.h	/^static __always_inline int bitmap_weight(const unsigned long *src, unsigned int nbits)$/;"	f
bitmap_xor	ds/bitmap.h	/^static inline void bitmap_xor(unsigned long *dst, const unsigned long *src1,$/;"	f
bitmap_zero	ds/bitmap.h	/^static inline void bitmap_zero(unsigned long *dst, unsigned int nbits)$/;"	f
bitrev16	ds/bitrev.h	74;"	d
bitrev32	ds/bitrev.h	66;"	d
bitrev8	ds/bitrev.h	82;"	d
blknr	fs.c	/^	addr_t blknr; $/;"	m	struct:file_io_vector	file:
blknr	fs.c	/^	addr_t blknr; $/;"	m	struct:inode_replay	file:
blknr	fs.c	/^	addr_t blknr;$/;"	m	struct:block_list	file:
blknr	fs.c	/^	addr_t blknr;$/;"	m	struct:directory_replay	file:
block	shared.h	/^	addr_t block;$/;"	m	struct:block_val
block	shared.h	/^	addr_t block;$/;"	m	struct:lru_key
block_bitmap	balloc.h	/^struct block_bitmap {$/;"	s
block_bitmap_desc	balloc.h	/^struct block_bitmap_desc {$/;"	s
block_bitmap_mutex	extents.c	/^pthread_mutex_t block_bitmap_mutex;$/;"	v
block_device	io/device.h	/^struct block_device {$/;"	s
block_end	shared.h	/^	unsigned long   block_end;$/;"	m	struct:free_list
block_free_tree	shared.h	/^	struct rb_root  block_free_tree;$/;"	m	struct:free_list	typeref:struct:free_list::rb_root
block_key_t	shared.h	/^typedef lru_val_t block_key_t;$/;"	t
block_list	fs.c	/^typedef struct block_list {$/;"	s	file:
block_start	shared.h	/^	unsigned long   block_start;$/;"	m	struct:free_list
block_val	shared.h	/^typedef struct block_val {$/;"	s
block_val_t	shared.h	/^} block_val_t;$/;"	t	typeref:struct:block_val
blockno	storage/spdk/async.c	/^	uint64_t blockno;$/;"	m	struct:readahead	file:
blocks	shared.h	/^	addr_t blocks[g_max_blocks_per_operation];$/;"	m	struct:logheader
blocks_of_bitmap	balloc.c	/^int blocks_of_bitmap(uint8_t dev, mlfs_fsblk_t nrblocks)$/;"	f
bloom_bv	ds/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	ds/uthash.h	/^   uint8_t bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	ds/uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
bmap_start	shared.h	/^	addr_t bmap_start;		\/\/ Block number of first free map block$/;"	m	struct:disk_superblock
bms_search	global/util.c	/^int bms_search(char *txt, char *pat)$/;"	f
brelse	io/block_io.c	/^void brelse(struct buffer_head *bh)$/;"	f
bsem	thpool.c	/^typedef struct bsem {$/;"	s	file:
bsem	thpool.c	/^} bsem;$/;"	t	typeref:struct:bsem	file:
bsem_init	thpool.c	/^static void bsem_init(bsem *bsem_p, int value) {$/;"	f	file:
bsem_post	thpool.c	/^static void bsem_post(bsem *bsem_p) {$/;"	f	file:
bsem_post_all	thpool.c	/^static void bsem_post_all(bsem *bsem_p) {$/;"	f	file:
bsem_reset	thpool.c	/^static void bsem_reset(bsem *bsem_p) {$/;"	f	file:
bsem_wait	thpool.c	/^static void bsem_wait(bsem* bsem_p) {$/;"	f	file:
buckets	ds/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buffer	storage/spdk/async.c	/^	char *buffer;$/;"	m	struct:spdk_async_io	file:
buffer	storage/spdk/sync.h	/^	char *buffer;$/;"	m	struct:spdk_sync_io
buffer_alloc	io/block_io.c	/^struct buffer_head *buffer_alloc(struct block_device *bdev, $/;"	f
buffer_alloc_fast	io/block_io.c	/^static struct buffer_head *buffer_alloc_fast(struct block_device *bdev,$/;"	f	file:
buffer_blocknr_cmp	io/block_io.c	/^static int buffer_blocknr_cmp(struct rb_node *a, struct rb_node *b)$/;"	f	file:
buffer_dirty_count	io/block_io.c	/^static int buffer_dirty_count = 0;$/;"	v	file:
buffer_dirty_threshold	io/block_io.c	/^static int buffer_dirty_threshold = 10000;$/;"	v	file:
buffer_free	io/block_io.c	/^static void buffer_free(struct buffer_head *bh)$/;"	f	file:
buffer_free_threshold	io/block_io.c	/^static int buffer_free_threshold = 90000;$/;"	v	file:
buffer_head	io/buffer_head.h	/^struct buffer_head$/;"	s
buffer_insert	io/block_io.c	/^static void buffer_insert(struct block_device *bdev,$/;"	f	file:
buffer_io_thread	io/block_io.c	/^static void *buffer_io_thread(void *arg)$/;"	f	file:
buffer_search	io/block_io.c	/^static struct buffer_head *buffer_search(struct block_device *bdev,$/;"	f	file:
buffer_writeback_ms	io/block_io.c	/^static int buffer_writeback_ms = 10000;$/;"	v	file:
buffer_writeback_thread	io/block_io.c	/^static void *buffer_writeback_thread(void *arg)$/;"	f	file:
byte_rev_table	ds/bitrev.c	/^const u8 byte_rev_table[256] = {$/;"	v
cache_init	fs.c	/^void cache_init(uint8_t dev)$/;"	f
change_bit	ds/bitops_arch.h	/^static __always_inline void change_bit(long nr, volatile unsigned long *addr)$/;"	f
clamp	mlfs/kerncompat.h	249;"	d
clamp_t	mlfs/kerncompat.h	277;"	d
clamp_val	mlfs/kerncompat.h	290;"	d
clear_bit	ds/bitops_arch.h	/^clear_bit(long nr, volatile unsigned long *addr)$/;"	f
clear_bit_unlock	ds/bitops_arch.h	/^static __always_inline void clear_bit_unlock(long nr, volatile unsigned long *addr)$/;"	f
cli_addr	fs.c	/^	struct sockaddr_un cli_addr;$/;"	m	struct:digest_arg	typeref:struct:digest_arg::sockaddr_un	file:
clock_speed_mhz	storage/spdk/common.c	/^float clock_speed_mhz;$/;"	v
cmpxchg	concurrency/synchronization.h	88;"	d
collapse_name	global/util.h	/^static inline int collapse_name(const char *input, char *_output)$/;"	f
commit	storage/storage.h	/^	int (*commit)(uint8_t dev);$/;"	m	struct:storage_operations
comp	ds/rbtree_latch.h	/^	int  (*comp)(void *key,                 struct latch_tree_node *b);$/;"	m	struct:latch_tree_ops
cond	concurrency/synchronization.h	/^	pthread_cond_t cond;$/;"	m	struct:cond_channel
cond	thpool.c	/^	pthread_cond_t   cond;$/;"	m	struct:bsem	file:
cond_channel	concurrency/synchronization.h	/^struct cond_channel {$/;"	s
constant_test_bit	ds/bitops_arch.h	/^static __always_inline int constant_test_bit(long nr, const volatile unsigned long *addr)$/;"	f
container_of	mlfs/kerncompat.h	362;"	d
container_of	mlfs/kerncompat.h	366;"	d
contended	concurrency/synchronization.h	/^		uint8_t contended;$/;"	m	struct:mlfs_mutex::state
copy	ds/rbtree_augmented.h	/^	void (*copy)(struct rb_node *old, struct rb_node *_new);$/;"	m	struct:rb_augment_callbacks
copy	ds/utarray.h	/^    ctor_f *copy;$/;"	m	struct:__anon8
core_val_t	shared.h	/^typedef block_key_t core_val_t;$/;"	t
count	ds/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
cpu_relax	concurrency/synchronization.h	85;"	d
cpu_to_le16	mlfs/kerncompat.h	392;"	d
cpu_to_le16	mlfs/kerncompat.h	399;"	d
cpu_to_le32	mlfs/kerncompat.h	390;"	d
cpu_to_le32	mlfs/kerncompat.h	397;"	d
cpu_to_le64	mlfs/kerncompat.h	388;"	d
cpu_to_le64	mlfs/kerncompat.h	395;"	d
cpu_to_le8	mlfs/kerncompat.h	384;"	d
crc32Table	mlfs_crc32.c	/^static const uint32_t crc32Table[256] = {$/;"	v	file:
crc32_tab	mlfs_crc32.c	/^const uint32_t crc32_tab[] = {$/;"	v
create	fs.c	/^	uint8_t create;$/;"	m	struct:inode_replay	file:
ctime	shared.h	/^	mlfs_time_t ctime;$/;"	m	struct:dinode
ctime	shared.h	/^	mlfs_time_t ctime;$/;"	m	struct:inode
ctor_f	ds/utarray.h	/^typedef void (ctor_f)(void *dst, const void *src);$/;"	t
ctrlr	storage/spdk/common.h	/^	struct spdk_nvme_ctrlr	*ctrlr;$/;"	m	struct:ctrlr_entry	typeref:struct:ctrlr_entry::spdk_nvme_ctrlr
ctrlr	storage/spdk/common.h	/^	struct spdk_nvme_ctrlr	*ctrlr;$/;"	m	struct:ns_entry	typeref:struct:ns_entry::spdk_nvme_ctrlr
ctrlr_entry	storage/spdk/common.h	/^struct ctrlr_entry {$/;"	s
d	ds/utarray.h	/^    char *d;     \/* n slots of size icd->sz*\/$/;"	m	struct:__anon9
d_digest_hash	fs.c	/^	d_replay_t *d_digest_hash;$/;"	m	struct:replay_list	file:
d_ino	global/types.h	/^	uint64_t            d_ino;      \/* Inode number *\/$/;"	m	struct:linux_dirent64
d_ino	global/types.h	/^	unsigned long       d_ino;      \/* Inode number *\/$/;"	m	struct:linux_dirent
d_name	global/types.h	/^	char                d_name[246];   \/* File name (null-terminated) *\/$/;"	m	struct:linux_dirent
d_name	global/types.h	/^	char                d_name[256];   \/* File name (null-terminated) *\/$/;"	m	struct:linux_dirent64
d_off	global/types.h	/^	uint64_t            d_off;      \/* Offset to next linux_dirent *\/$/;"	m	struct:linux_dirent64
d_off	global/types.h	/^	unsigned long       d_off;      \/* Offset to next linux_dirent *\/$/;"	m	struct:linux_dirent
d_reclen	global/types.h	/^	unsigned short int  d_reclen;   \/* Length of this linux_dirent *\/$/;"	m	struct:linux_dirent
d_reclen	global/types.h	/^	unsigned short int  d_reclen;   \/* Length of this linux_dirent *\/$/;"	m	struct:linux_dirent64
d_replay_key	fs.c	/^typedef struct d_replay_key {$/;"	s	file:
d_replay_key_t	fs.c	/^} d_replay_key_t;$/;"	t	typeref:struct:d_replay_key	file:
d_replay_t	fs.c	/^} d_replay_t;$/;"	t	typeref:struct:directory_replay	file:
d_type	global/types.h	/^	unsigned char       d_type;$/;"	m	struct:linux_dirent64
d_type	global/types.h	/^	unsigned char       d_type;$/;"	m	struct:linux_dirent_tail
data	shared.h	/^	offset_t data[g_max_blocks_per_operation];$/;"	m	struct:logheader
datablock_start	shared.h	/^	addr_t datablock_start;	\/\/ Block number of first data block$/;"	m	struct:disk_superblock
dax_addr	storage/storage_dax.c	/^static uint8_t *dax_addr[g_n_devices + 1];$/;"	v	file:
dax_commit	storage/storage_dax.c	/^int dax_commit(uint8_t dev)$/;"	f
dax_erase	storage/storage_dax.c	/^int dax_erase(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
dax_exit	storage/storage_dax.c	/^void dax_exit(uint8_t dev)$/;"	f
dax_init	storage/storage_dax.c	/^uint8_t *dax_init(uint8_t dev, char *dev_path)$/;"	f
dax_read	storage/storage_dax.c	/^int dax_read(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
dax_read_unaligned	storage/storage_dax.c	/^int dax_read_unaligned(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t offset, $/;"	f
dax_write	storage/storage_dax.c	/^int dax_write(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
dax_write_unaligned	storage/storage_dax.c	/^int dax_write_unaligned(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t offset, $/;"	f
dbg_check_dir	dirent.c	/^void dbg_check_dir(void *data)$/;"	f
dbg_check_inode	dirent.c	/^void dbg_check_inode(void *data)$/;"	f
dbg_dump_dir	dirent.c	/^void dbg_dump_dir(uint8_t dev, uint32_t inum)$/;"	f
dbg_dump_inode	dirent.c	/^void dbg_dump_inode(uint8_t dev, uint32_t inum)$/;"	f
dbg_log	global/ncx_log.h	10;"	d
dbg_path_walk	dirent.c	/^void dbg_path_walk(char *path)$/;"	f
dbg_save_dentry	dirent.c	/^void dbg_save_dentry(struct mlfs_dirent *de, struct inode *dir_inode)$/;"	f
dbg_save_inode	dirent.c	/^void dbg_save_inode(struct inode *inode, char *name)$/;"	f
dbg_ssd_dump	debug.c	/^void dbg_ssd_dump(addr_t blockno) $/;"	f
dblk_cmp	dirent.c	/^static inline int dblk_cmp(struct rb_node *a, struct rb_node *b)$/;"	f	file:
dblk_rb_node	fs.h	/^	struct rb_node dblk_rb_node;$/;"	m	struct:dirent_block	typeref:struct:dirent_block::rb_node
dcache_alloc_add	fs.h	/^struct dirent_block *dcache_alloc_add(uint8_t dev, $/;"	f
dcache_find	fs.h	/^struct dirent_block *dcache_find(uint8_t dev, $/;"	f
dcache_key	fs.h	/^typedef struct dcache_key {$/;"	s
dcache_key_t	fs.h	/^} dcache_key_t;$/;"	t	typeref:struct:dcache_key
dcache_spinlock	fs.c	/^pthread_spinlock_t dcache_spinlock;$/;"	v
de_cache	shared.h	/^	struct dirent_data *de_cache;$/;"	m	struct:inode	typeref:struct:inode::dirent_data
de_cache_alloc_add	fs.h	/^static inline struct inode *de_cache_alloc_add(struct inode *dir_inode, $/;"	f
de_cache_del	fs.h	/^static inline int de_cache_del(struct inode *dir_inode, const char *name)$/;"	f
de_cache_find	fs.h	/^static inline struct inode *de_cache_find(struct inode *dir_inode, $/;"	f
de_cache_spinlock	shared.h	/^	pthread_spinlock_t de_cache_spinlock;$/;"	m	struct:inode
debug	global/ncx_log.h	19;"	d
detach_bh_from_freelist	io/block_io.c	/^static void detach_bh_from_freelist(struct buffer_head *bh)$/;"	f	file:
dev	extents.h	/^	uint8_t dev;$/;"	m	struct:mlfs_extent_handle
dev	shared.h	/^	uint8_t dev;		\/\/ Device id for multi-level storage$/;"	m	struct:dinode
dev	shared.h	/^	uint8_t dev;        \/\/ Device id for multi-level storage$/;"	m	struct:inode
dev	shared.h	/^	uint8_t dev;$/;"	m	struct:lru_key
dev_size	storage/storage.h	/^ static uint64_t dev_size[g_n_devices + 1] = {0, 36507222016UL, 128849018880UL, 193273528320UL, 4294967296UL};$/;"	v
device_init	io/block_io.c	/^void device_init(void)$/;"	f
device_read	io/block_io.c	/^static int device_read(uint8_t dev, addr_t blocknr, int count, int blk_size,$/;"	f	file:
device_shutdown	io/block_io.c	/^void device_shutdown(void)$/;"	f
device_write	io/block_io.c	/^static int device_write(uint8_t dev, addr_t blocknr, int count, int blk_size,$/;"	f	file:
digest	ds/xxhash.h	/^typedef struct { unsigned char digest[4]; } XXH32_canonical_t;$/;"	m	struct:__anon12
digest	ds/xxhash.h	/^typedef struct { unsigned char digest[8]; } XXH64_canonical_t;$/;"	m	struct:__anon13
digest_arg	fs.c	/^struct digest_arg {$/;"	s	file:
digest_dir_tsc	fs.h	/^	uint64_t digest_dir_tsc;$/;"	m	struct:mlfs_kernfs_stats
digest_directory	fs.c	/^int digest_directory(uint8_t from_dev, uint8_t to_dev, int n, uint8_t type, $/;"	f
digest_each_log_entries	fs.c	/^static void digest_each_log_entries(uint8_t from_dev, loghdr_meta_t *loghdr_meta)$/;"	f	file:
digest_file	fs.c	/^int digest_file(uint8_t from_dev, uint8_t to_dev, uint32_t file_inum, $/;"	f
digest_file_iovec	fs.c	/^int digest_file_iovec(uint8_t from_dev, uint8_t to_dev, $/;"	f
digest_file_tsc	fs.h	/^	uint64_t digest_file_tsc;$/;"	m	struct:mlfs_kernfs_stats
digest_inode	fs.c	/^int digest_inode(uint8_t from_dev, uint8_t to_dev, $/;"	f
digest_inode_tsc	fs.h	/^	uint64_t digest_inode_tsc;$/;"	m	struct:mlfs_kernfs_stats
digest_log_from_replay_list	fs.c	/^static void digest_log_from_replay_list(uint8_t from_dev, struct replay_list *replay_list)$/;"	f	file:
digest_logs	fs.c	/^static int digest_logs(uint8_t from_dev, int n_hdrs, $/;"	f	file:
digest_replay_and_optimize	fs.c	/^static void digest_replay_and_optimize(uint8_t from_dev, $/;"	f	file:
digest_time_tsc	fs.h	/^	uint64_t digest_time_tsc; $/;"	m	struct:mlfs_kernfs_stats
digest_unlink	fs.c	/^int digest_unlink(uint8_t from_dev, uint8_t to_dev, uint32_t inum)$/;"	f
dinode	shared.h	/^struct dinode {$/;"	s
dinode_flags	shared.h	/^	uint8_t dinode_flags; \/\/flag to see whether dinode is loaded or not$/;"	m	struct:inode
dir_add_entry	dirent.c	/^int dir_add_entry(struct inode *dir_inode, char *name, uint32_t inum)$/;"	f
dir_change_entry	dirent.c	/^dir_change_entry(struct inode *dir_inode, char *oldname, $/;"	f
dir_inum	fs.c	/^	uint32_t dir_inum;$/;"	m	struct:directory_replay	file:
dir_lookup	dirent.c	/^struct inode* dir_lookup(struct inode *dir_inode, char *name, offset_t *poff)$/;"	f
dir_remove_entry	dirent.c	/^int dir_remove_entry(struct inode *dir_inode, char *name, uint32_t inum)$/;"	f
dir_size	fs.c	/^	uint32_t dir_size;$/;"	m	struct:directory_replay	file:
directory_replay	fs.c	/^typedef struct directory_replay {$/;"	s	file:
dirent_array	fs.h	/^	uint8_t dirent_array[g_block_size_bytes];$/;"	m	struct:dirent_block
dirent_block	fs.h	/^struct dirent_block {$/;"	s
dirent_data	fs.h	/^struct dirent_data {$/;"	s
dirent_hash	fs.c	/^struct dirent_block *dirent_hash[g_n_devices + 1];$/;"	v	typeref:struct:dirent_block
dirty	balloc.h	/^	int dirty:1;$/;"	m	struct:block_bitmap_desc
disk_sb	fs.c	/^struct disk_superblock disk_sb[g_n_devices];$/;"	v	typeref:struct:disk_superblock
disk_superblock	shared.h	/^struct disk_superblock {$/;"	s
do_migrate_blocks	migrate.c	/^int do_migrate_blocks(uint8_t from_dev, uint8_t to_dev, uint32_t file_inum, $/;"	f
do_readahead	storage/spdk/async.c	/^static uint8_t do_readahead = 0;$/;"	v	file:
done	storage/spdk/sync.h	/^	volatile int done;$/;"	m	struct:spdk_sync_io
dtor	ds/utarray.h	/^    dtor_f *dtor;$/;"	m	struct:__anon8
dtor_f	ds/utarray.h	/^typedef void (dtor_f)(void *elt);$/;"	t
dummy_callbacks	ds/rbtree.c	/^static const struct rb_augment_callbacks dummy_callbacks = {$/;"	v	typeref:struct:rb_augment_callbacks	file:
dummy_copy	ds/rbtree.c	/^static inline void dummy_copy(struct rb_node *old, struct rb_node *_new) {}$/;"	f	file:
dummy_propagate	ds/rbtree.c	/^static inline void dummy_propagate(struct rb_node *node, struct rb_node *stop) {}$/;"	f	file:
dummy_rotate	ds/rbtree.c	/^static inline void dummy_rotate(struct rb_node *old, struct rb_node *_new) {}$/;"	f	file:
ee_block	extents.h	/^	uint32_t ee_block;    \/* first logical block extent covers *\/$/;"	m	struct:mlfs_extent
ee_len	extents.h	/^	uint16_t ee_len;      \/* number of blocks covered by extent *\/$/;"	m	struct:mlfs_extent
ee_start_hi	extents.h	/^	uint16_t ee_start_hi; \/* high 16 bits of physical block *\/$/;"	m	struct:mlfs_extent
ee_start_lo	extents.h	/^	uint32_t ee_start_lo; \/* low 32 bits of physical block *\/$/;"	m	struct:mlfs_extent
eh_depth	extents.h	/^	uint16_t eh_depth;      \/* has tree real underlying blocks? *\/$/;"	m	struct:mlfs_extent_header
eh_entries	extents.h	/^	uint16_t eh_entries;    \/* number of valid entries *\/$/;"	m	struct:mlfs_extent_header
eh_generation	extents.h	/^	uint32_t eh_generation; \/* generation of the tree *\/$/;"	m	struct:mlfs_extent_header
eh_magic	extents.h	/^	uint16_t eh_magic;      \/* probably will support different formats *\/$/;"	m	struct:mlfs_extent_header
eh_max	extents.h	/^	uint16_t eh_max;	\/* capacity of store in entries *\/$/;"	m	struct:mlfs_extent_header
ei_block	extents.h	/^	uint32_t ei_block;   \/* index covers logical blocks from 'block' *\/$/;"	m	struct:mlfs_extent_idx
ei_leaf_hi	extents.h	/^	uint16_t ei_leaf_hi; \/* high 16 bits of physical block *\/$/;"	m	struct:mlfs_extent_idx
ei_leaf_lo	extents.h	/^	uint32_t ei_leaf_lo; \/* pointer to the physical block of the next level. $/;"	m	struct:mlfs_extent_idx
ei_unused	extents.h	/^	uint16_t ei_unused;$/;"	m	struct:mlfs_extent_idx
emulate_latency_ns	storage/storage_dax.c	/^static inline void emulate_latency_ns(int ns)$/;"	f	file:
enable_perf_stats	fs.c	/^uint8_t enable_perf_stats;$/;"	v
end	global/ncx_slab.h	/^	u_char *end;$/;"	m	struct:__anon14
erase	storage/storage.h	/^	int (*erase)(uint8_t dev, addr_t blockno, uint32_t io_size);$/;"	m	struct:storage_operations
err	thpool.c	32;"	d	file:
err	thpool.c	34;"	d	file:
error	global/ncx_log.h	21;"	d
et_checksum	extents.h	/^	uint32_t et_checksum; \/* crc32c(uuid+inum+extent_block) *\/$/;"	m	struct:mlfs_extent_tail
evict_slru_lists	migrate.c	/^static void evict_slru_lists(void)$/;"	f	file:
exit	storage/storage.h	/^	void (*exit)(uint8_t dev);$/;"	m	struct:storage_operations
expand_mult	ds/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
ext_block_hdr	extents.h	/^static inline struct mlfs_extent_header *ext_block_hdr(struct buffer_head *bh)$/;"	f
ext_depth	extents.h	/^static inline uint16_t ext_depth(handle_t *handle, struct inode *inode)$/;"	f
ext_inode_hdr	extents.h	/^static inline struct mlfs_extent_header *ext_inode_hdr(handle_t *handle, $/;"	f
ext_used	shared.h	/^	uint32_t ext_used;$/;"	m	struct:logheader_meta
f_blklist_t	fs.c	/^} f_blklist_t;$/;"	t	typeref:struct:block_list	file:
f_digest_hash	fs.c	/^	f_replay_t *f_digest_hash;$/;"	m	struct:replay_list	file:
f_digest_worker_arg	fs.c	/^struct f_digest_worker_arg {$/;"	s	file:
f_iovec_t	fs.c	/^} f_iovec_t;$/;"	t	typeref:struct:file_io_vector	file:
f_item	fs.c	/^	f_replay_t *f_item;$/;"	m	struct:f_digest_worker_arg	file:
f_replay_t	fs.c	/^} f_replay_t;$/;"	t	typeref:struct:file_replay	file:
f_stat	storage/storage_hdd.c	/^static struct stat f_stat[g_n_devices + 1];$/;"	v	typeref:struct:stat	file:
f_stat	storage/storage_pmem.c	/^static struct stat f_stat;$/;"	v	typeref:struct:stat	file:
f_stat	storage/storage_ramdisk.c	/^static struct stat f_stat[g_n_devices + 1];$/;"	v	typeref:struct:stat	file:
fail_head	migrate.h	/^	struct list_head fail_head;$/;"	m	struct:isolated_list	typeref:struct:isolated_list::list_head
false	mlfs/kerncompat.h	419;"	d
fcache	shared.h	/^	struct fcache_block *fcache;$/;"	m	struct:inode	typeref:struct:inode::fcache_block
fcache_hash	shared.h	/^	khash_t(fcache) *fcache_hash;$/;"	m	struct:inode
fcache_rwlock	shared.h	/^	pthread_rwlock_t fcache_rwlock;$/;"	m	struct:inode
fd	storage/storage_hdd.c	/^static int fd;$/;"	v	file:
fd	storage/storage_ramdisk.c	/^static int fd;$/;"	v	file:
ffz	ds/bitops_arch.h	/^static __always_inline unsigned long ffz(unsigned long word)$/;"	f
fifo_path	tests/fifo_cli.c	8;"	d	file:
file_digest_thread_pool	fs.c	/^threadpool file_digest_thread_pool;$/;"	v
file_digest_worker	fs.c	/^static void file_digest_worker(void *arg)$/;"	f	file:
file_io_vector	fs.c	/^typedef struct file_io_vector {$/;"	s	file:
file_replay	fs.c	/^typedef struct file_replay {$/;"	s	file:
find_first_bit	ds/bitmap.c	/^unsigned long find_first_bit(const unsigned long *addr, unsigned long size)$/;"	f
find_first_zero_bit	ds/bitmap.c	/^unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size)$/;"	f
find_last_bit	ds/bitmap.c	/^unsigned long find_last_bit(const unsigned long *addr, unsigned long size)$/;"	f
find_mlfs_extent_tail	extents.h	/^find_mlfs_extent_tail(struct mlfs_extent_header *eh)$/;"	f
find_next_bit	ds/bitmap.c	/^unsigned long find_next_bit(const unsigned long *addr, unsigned long size,$/;"	f
find_next_zero_bit	ds/bitmap.c	/^unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,$/;"	f
first	ds/list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
first_node	shared.h	/^	struct mlfs_range_node *first_node;$/;"	m	struct:free_list	typeref:struct:free_list::mlfs_range_node
flags	shared.h	/^	uint8_t flags;      \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
fls	ds/bitops_arch.h	/^static __always_inline int fls(int x)$/;"	f
fls64	ds/bitops_arch.h	/^static __always_inline int fls64(__u64 x)$/;"	f
fls_long	ds/bitops.h	/^static inline unsigned fls_long(unsigned long l)$/;"	f
for_each_clear_bit	ds/bitops.h	48;"	d
for_each_clear_bit_from	ds/bitops.h	54;"	d
for_each_set_bit	ds/bitops.h	37;"	d
for_each_set_bit_from	ds/bitops.h	43;"	d
free	global/ncx_slab.h	/^	ncx_slab_page_t free;$/;"	m	struct:__anon14
free_all_bitmap	balloc.c	/^void free_all_bitmap(struct block_bitmap *b_bitmap)$/;"	f
free_data_count	shared.h	/^	unsigned long   free_data_count;$/;"	m	struct:free_list
free_list	shared.h	/^struct free_list {$/;"	s
free_lists	shared.h	/^	struct free_list *free_lists;$/;"	m	struct:super_block	typeref:struct:super_block::free_list
free_log_count	shared.h	/^	unsigned long   free_log_count;$/;"	m	struct:free_list
free_page	global/ncx_slab.h	/^	size_t pages, free_page;$/;"	m	struct:__anon15
freed_data_pages	shared.h	/^	unsigned long   freed_data_pages;$/;"	m	struct:free_list
freed_log_pages	shared.h	/^	unsigned long   freed_log_pages;$/;"	m	struct:free_list
from_dev	fs.c	/^	uint8_t from_dev;$/;"	m	struct:f_digest_worker_arg	file:
front	thpool.c	/^	job  *front;                         \/* pointer to front of queue *\/$/;"	m	struct:jobqueue	file:
fs_bforget	extents_bh.c	/^void fs_bforget(struct buffer_head *bh)$/;"	f
fs_bh_alloc	extents_bh.c	/^static int fs_bh_alloc = 0;$/;"	v	file:
fs_bh_freed	extents_bh.c	/^static int fs_bh_freed = 0;$/;"	v	file:
fs_bh_showstat	extents_bh.c	/^void fs_bh_showstat(void)$/;"	f
fs_bread	extents_bh.c	/^struct buffer_head *fs_bread(uint8_t dev, mlfs_fsblk_t block,$/;"	f
fs_brelse	extents_bh.c	/^void fs_brelse(struct buffer_head *bh)$/;"	f
fs_get_bh	extents_bh.c	/^struct buffer_head *fs_get_bh(uint8_t dev, mlfs_fsblk_t block,$/;"	f
fs_mark_buffer_dirty	extents_bh.c	/^void fs_mark_buffer_dirty(struct buffer_head *bh)$/;"	f
fs_start_trans	extents_bh.c	/^void fs_start_trans(struct super_block *sb) { UNUSED(sb); }$/;"	f
fs_stop_trans	extents_bh.c	/^void fs_stop_trans(struct super_block *sb) { UNUSED(sb); }$/;"	f
function	thpool.c	/^	void   (*function)(void* arg);       \/* function pointer          *\/$/;"	m	struct:job	file:
g_bdev	storage/storage.c	/^struct block_device *g_bdev[g_n_devices + 1];$/;"	v	typeref:struct:block_device
g_block_size_bytes	global/global.h	22;"	d
g_block_size_shift	global/global.h	23;"	d
g_controllers	storage/spdk/common.c	/^struct ctrlr_entry *g_controllers = NULL;$/;"	v	typeref:struct:ctrlr_entry
g_dev_path	storage/storage.c	/^char *g_dev_path[] = {$/;"	v
g_directory_mask	global/global.h	30;"	d
g_directory_shift	global/global.h	29;"	d
g_enable_perf_stats	storage/spdk/common.c	/^uint8_t g_enable_perf_stats;$/;"	v
g_fd_start	global/global.h	34;"	d
g_hdd_block_size_bytes	global/global.h	27;"	d
g_hdd_block_size_shift	global/global.h	28;"	d
g_hdd_dev	fs.c	/^uint8_t g_hdd_dev = 0;$/;"	v
g_log_dev	fs.c	/^uint8_t g_log_dev = 0;$/;"	v
g_lru	migrate.c	/^struct lru g_lru[g_n_devices + 1];$/;"	v	typeref:struct:lru
g_lru_hash	migrate.c	/^lru_node_t *g_lru_hash[g_n_devices + 1];$/;"	v
g_max_blocks_per_operation	global/global.h	26;"	d
g_max_open_files	global/global.h	44;"	d
g_max_read_cache_blocks	global/global.h	32;"	d
g_n_devices	global/global.h	20;"	d
g_namespaces	storage/spdk/common.c	/^struct ns_entry *g_namespaces = NULL;$/;"	v	typeref:struct:ns_entry
g_one	ds/xxhash.c	/^    static const int g_one = 1;$/;"	v	file:
g_perf_stats	fs.c	/^kernfs_stats_t g_perf_stats;$/;"	v
g_root_dev	global/global.h	21;"	d
g_segsize_bytes	global/global.h	31;"	d
g_spdk_perf_stats	storage/spdk/common.c	/^spdk_stats_t g_spdk_perf_stats;$/;"	v
g_ssd_dev	fs.c	/^uint8_t g_ssd_dev = 0;$/;"	v
g_ssd_dev	tests/extent_test.cc	/^		uint8_t g_ssd_dev;$/;"	m	class:ExtentTest	file:
get16bits	ds/uthash.h	592;"	d
get16bits	ds/uthash.h	595;"	d
get16bits	ds/uthash.h	599;"	d
get_bh	io/block_io.h	/^static inline void get_bh(struct buffer_head *bh)$/;"	f
get_bitmask_order	ds/bitops.h	/^static inline int get_bitmask_order(unsigned int count)$/;"	f
get_block_size	extents.c	/^static inline uint32_t get_block_size(struct inode *inode) $/;"	f	file:
get_count_order	ds/bitops.h	/^static inline int get_count_order(unsigned int count)$/;"	f
get_cpu_clock_speed	global/util.c	/^float get_cpu_clock_speed(void)$/;"	f
get_default_free_blocks_flags	extents.c	/^static inline int get_default_free_blocks_flags(struct inode *inode) $/;"	f	file:
get_dirent	dirent.c	/^struct mlfs_dirent *get_dirent(struct inode *dir_inode, offset_t offset)$/;"	f
get_dirent_block	dirent.c	/^uint8_t *get_dirent_block(struct inode *dir_inode, offset_t offset)$/;"	f
get_inode_block	fs.h	/^static inline addr_t get_inode_block(uint8_t dev, uint32_t inum)$/;"	f
get_inode_sb	shared.h	/^static inline struct super_block* get_inode_sb(uint8_t dev, struct inode *inode)$/;"	f
get_loghdr_meta	concurrency/thread.c	/^struct logheader_meta *get_loghdr_meta(void)$/;"	f
get_lower_dev	migrate.c	/^static inline uint8_t get_lower_dev(uint8_t dev)$/;"	f	file:
get_next_name	global/util.h	/^static inline char* get_next_name(char *path, char *name)$/;"	f
get_parent_path	global/util.h	/^static inline char* get_parent_path(char *path, char *parent_path, char *name)$/;"	f
get_rand_interval	global/util.c	/^unsigned int get_rand_interval(unsigned int min, unsigned int max)$/;"	f
get_tid	global/defs.h	8;"	d
get_unaligned_le16	mlfs/kerncompat.h	409;"	d
get_unaligned_le32	mlfs/kerncompat.h	411;"	d
get_unaligned_le64	mlfs/kerncompat.h	413;"	d
get_unaligned_le8	mlfs/kerncompat.h	407;"	d
guest_buffer	storage/spdk/async.c	/^	char *guest_buffer;$/;"	m	struct:spdk_async_io	file:
guest_buffer	storage/spdk/sync.h	/^	char *guest_buffer;$/;"	m	struct:spdk_sync_io
handle_digest_request	fs.c	/^static void handle_digest_request(void *arg)$/;"	f	file:
handle_t	extents.h	/^typedef struct mlfs_extent_handle handle_t;$/;"	t	typeref:struct:mlfs_extent_handle
has_jobs	thpool.c	/^	bsem *has_jobs;                      \/* flag as binary semaphore  *\/$/;"	m	struct:jobqueue	file:
hash1	shared.h	/^static inline uint64_t hash1(block_key_t k)$/;"	f
hash1i	shared.h	/^static inline uint64_t hash1i(uint64_t k)$/;"	f
hash2	shared.h	/^static inline uint64_t hash2(block_key_t k)$/;"	f
hash_handle	fs.h	/^	mlfs_hash_t hash_handle;$/;"	m	struct:dirent_block
hash_handle	fs.h	/^	mlfs_hash_t hash_handle;$/;"	m	struct:dirent_data
hash_handle	io/buffer_head.h	/^	mlfs_hash_t hash_handle;$/;"	m	struct:buffer_head
hash_handle	shared.h	/^	mlfs_hash_t hash_handle;$/;"	m	struct:inode
hash_key	fs.c	/^	offset_t hash_key;$/;"	m	struct:file_io_vector	file:
hashv	ds/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
hdd_commit	storage/storage_hdd.c	/^int hdd_commit(uint8_t dev)$/;"	f
hdd_erase	storage/storage_hdd.c	/^int hdd_erase(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
hdd_exit	storage/storage_hdd.c	/^void hdd_exit(uint8_t dev)$/;"	f
hdd_init	storage/storage_hdd.c	/^uint8_t *hdd_init(uint8_t dev, char *dev_path)$/;"	f
hdd_read	storage/storage_hdd.c	/^int hdd_read(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
hdd_write	storage/storage_hdd.c	/^int hdd_write(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
hdr_blkno	shared.h	/^	addr_t hdr_blkno;$/;"	m	struct:logheader_meta
head	fs.c	/^	struct list_head head;$/;"	m	struct:replay_list	typeref:struct:replay_list::list_head	file:
head	migrate.h	/^	struct list_head head;$/;"	m	struct:isolated_list	typeref:struct:isolated_list::list_head
hexdump	tests/extent_test.cc	/^void ExtentTest::hexdump(void *mem, unsigned int len)$/;"	f	class:ExtentTest
hh	fs.c	/^	mlfs_hash_t hh;$/;"	m	struct:directory_replay	file:
hh	fs.c	/^	mlfs_hash_t hh;$/;"	m	struct:file_io_vector	file:
hh	fs.c	/^	mlfs_hash_t hh;$/;"	m	struct:file_replay	file:
hh	fs.c	/^	mlfs_hash_t hh;$/;"	m	struct:inode_replay	file:
hh	fs.c	/^	mlfs_hash_t hh;$/;"	m	struct:unlink_replay	file:
hh	slru.h	/^	mlfs_hash_t hh;$/;"	m	struct:lru_node
hh_head	ds/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	ds/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	ds/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	ds/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
hlist_add_after	ds/list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	ds/list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_fake	ds/list.h	/^static inline void hlist_add_fake(struct hlist_node *n)$/;"	f
hlist_add_head	ds/list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	ds/list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	ds/list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	ds/list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	ds/list.h	709;"	d
hlist_entry_safe	ds/list.h	721;"	d
hlist_for_each	ds/list.h	711;"	d
hlist_for_each_entry	ds/list.h	733;"	d
hlist_for_each_entry_continue	ds/list.h	744;"	d
hlist_for_each_entry_from	ds/list.h	756;"	d
hlist_for_each_entry_safe	ds/list.h	768;"	d
hlist_for_each_safe	ds/list.h	714;"	d
hlist_head	ds/list.h	/^struct hlist_head$/;"	s
hlist_move_list	ds/list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	ds/list.h	/^struct hlist_node$/;"	s
hlist_unhashed	ds/list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hweight16	ds/bitops_arch.h	97;"	d
hweight32	ds/bitops_arch.h	98;"	d
hweight64	ds/bitops_arch.h	99;"	d
hweight8	ds/bitops_arch.h	96;"	d
hweight_long	ds/bitops.h	/^static __always_inline unsigned long hweight_long(unsigned long w)$/;"	f
i	ds/utarray.h	/^    unsigned i,n;\/* i: index of next available slot, n: num slots *\/$/;"	m	struct:__anon9
i_block	shared.h	/^		uint32_t i_block[15];$/;"	m	union:inode::__anon1
i_block	shared.h	/^		uint32_t i_block[15];$/;"	m	union:inode::__anon2
i_block	shared.h	/^		uint32_t i_block[15];$/;"	m	union:inode::__anon3
i_csum	shared.h	/^	uint32_t i_csum;$/;"	m	struct:inode
i_data	shared.h	/^		uint32_t i_data[15]; $/;"	m	union:inode::__anon1
i_data	shared.h	/^		uint32_t i_data[15]; $/;"	m	union:inode::__anon2
i_data	shared.h	/^		uint32_t i_data[15]; $/;"	m	union:inode::__anon3
i_data_dirty	shared.h	/^	uint8_t	 i_data_dirty;$/;"	m	struct:inode
i_db	shared.h	/^	struct db_handle *i_db; $/;"	m	struct:inode	typeref:struct:inode::db_handle
i_digest_hash	fs.c	/^	i_replay_t *i_digest_hash;$/;"	m	struct:replay_list	file:
i_dirty_dblock	shared.h	/^	struct rb_root i_dirty_dblock; \/\/ rb root for dirty directory block.$/;"	m	struct:inode	typeref:struct:inode::rb_root
i_generation	shared.h	/^	uint32_t i_generation;$/;"	m	struct:inode
i_mutex	shared.h	/^	pthread_mutex_t i_mutex;$/;"	m	struct:inode
i_rb_node	shared.h	/^	struct rb_node i_rb_node;      \/\/ rb node link for s_dirty_root.$/;"	m	struct:inode	typeref:struct:inode::rb_node
i_ref	shared.h	/^	int i_ref;          \/\/ Reference count$/;"	m	struct:inode
i_replay_t	fs.c	/^} i_replay_t;$/;"	t	typeref:struct:inode_replay	file:
i_sb	shared.h	/^	struct super_block **i_sb;$/;"	m	struct:inode	typeref:struct:inode::super_block
i_slru_head	shared.h	/^	struct list_head i_slru_head;$/;"	m	struct:inode	typeref:struct:inode::list_head
i_uuid	shared.h	/^	uint8_t i_uuid[16]; \/\/ For compability only.$/;"	m	struct:inode
i_writeback	shared.h	/^	int (*i_writeback)(struct inode *inode);$/;"	m	struct:inode
ialloc	inode.c	/^struct inode* ialloc(uint8_t dev, uint8_t type, uint32_t inode_nr)$/;"	f
icache_add	fs.h	/^static inline struct inode *icache_add(struct inode *inode)$/;"	f
icache_alloc_add	fs.h	/^static inline struct inode *icache_alloc_add(uint8_t dev, uint32_t inum)$/;"	f
icache_del	fs.h	/^static inline int icache_del(struct inode *ip)$/;"	f
icache_find	fs.h	/^static inline struct inode *icache_find(uint8_t dev, uint32_t inum)$/;"	f
icache_spinlock	fs.c	/^pthread_spinlock_t icache_spinlock;$/;"	v
icd	ds/utarray.h	/^    UT_icd icd;  \/* initializer, copy and destructor functions *\/$/;"	m	struct:__anon9
id	shared.h	/^	uint32_t id;$/;"	m	struct:free_list
id	thpool.c	/^	int       id;                        \/* friendly id               *\/$/;"	m	struct:thread	file:
ideal_chain_maxlen	ds/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
idealloc	inode.c	/^int idealloc(struct inode *inode)$/;"	f
idup	inode.c	/^struct inode* idup(struct inode *ip)$/;"	f
iget	inode.c	/^struct inode* iget(uint8_t dev, uint32_t inum)$/;"	f
ilock	inode.c	/^void ilock(struct inode *ip)$/;"	f
in_range	extents.h	374;"	d
ineff_expands	ds/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
info	global/ncx_log.h	20;"	d
init	ds/utarray.h	/^    init_f *init;$/;"	m	struct:__anon8
init	storage/storage.h	/^	uint8_t *(*init)(uint8_t dev, char *dev_path);$/;"	m	struct:storage_operations
init_device_lru_list	fs.c	/^void init_device_lru_list(void)$/;"	f
init_f	ds/utarray.h	/^typedef void (init_f)(void *elt);$/;"	t
init_fs	fs.c	/^void init_fs(void)$/;"	f
init_timer	concurrency/timer.c	/^void init_timer(void) $/;"	f
initialize	tests/extent_test.cc	/^void ExtentTest::initialize(void)$/;"	f	class:ExtentTest
inner_io_size	storage/spdk/async.c	/^	unsigned int inner_io_size;$/;"	m	struct:spdk_async_data	file:
inode	fs.h	/^	struct inode *inode;$/;"	m	struct:dirent_data	typeref:struct:dirent_data::inode
inode	shared.h	/^struct inode {$/;"	s
inode	tests/extent_test.cc	/^		struct inode *inode;$/;"	m	class:ExtentTest	typeref:struct:ExtentTest::inode	file:
inode_cmp	extents.c	/^static int inode_cmp(struct rb_node *a, struct rb_node *b)$/;"	f	file:
inode_hash	fs.c	/^struct inode *inode_hash[g_n_devices + 1];$/;"	v	typeref:struct:inode
inode_no	shared.h	/^	uint32_t inode_no[g_max_blocks_per_operation];$/;"	m	struct:logheader
inode_replay	fs.c	/^typedef struct inode_replay {$/;"	s	file:
inode_start	shared.h	/^	addr_t inode_start;		\/\/ Block number of first inode block$/;"	m	struct:disk_superblock
inode_version_table	fs.c	/^uint16_t *inode_version_table;$/;"	v
inum	fs.c	/^	uint32_t inum;$/;"	m	struct:d_replay_key	file:
inum	fs.c	/^	uint32_t inum;$/;"	m	struct:replay_node_key	file:
inum	fs.h	/^	uint32_t inum;$/;"	m	struct:dcache_key
inum	shared.h	/^	uint32_t inum;      \/\/ Inode number$/;"	m	struct:inode
inum	shared.h	/^	uint32_t inum;$/;"	m	struct:lru_val
inum	shared.h	/^  uint32_t inum;$/;"	m	struct:mlfs_dirent
inuse	shared.h	/^	uint16_t inuse;$/;"	m	struct:logheader
invalidate_path	shared.h	/^	uint8_t invalidate_path;$/;"	m	struct:inode
io_vec	shared.h	/^	io_vec_t io_vec[10];$/;"	m	struct:logheader_meta
io_vec	shared.h	/^typedef struct io_vec {$/;"	s
io_vec_t	shared.h	/^} io_vec_t;$/;"	t	typeref:struct:io_vec
ios_left	storage/spdk/async.c	/^	int ios_left;$/;"	m	struct:spdk_async_io	file:
iov_blk_list	fs.c	/^	struct list_head iov_blk_list;$/;"	m	struct:file_io_vector	typeref:struct:file_io_vector::list_head	file:
iovec_hash	fs.c	/^	f_iovec_t *iovec_hash;$/;"	m	struct:file_replay	file:
iovec_list	fs.c	/^	struct list_head iovec_list;$/;"	m	struct:file_replay	typeref:struct:file_replay::list_head	file:
iput	inode.c	/^void iput(struct inode *ip)$/;"	f
is_del_entry	ds/list.h	/^static inline int is_del_entry(struct list_head *entry)$/;"	f
is_hdr_allocated	shared.h	/^	uint8_t is_hdr_allocated;$/;"	m	struct:logheader_meta
is_power_of_two	global/util.c	/^int is_power_of_two(unsigned long x)$/;"	f
isolated_list	migrate.h	/^typedef struct isolated_list {$/;"	s
isolated_list_t	migrate.h	/^} isolated_list_t;$/;"	t	typeref:struct:isolated_list
itrunc	inode.c	/^void itrunc(struct inode *ip)$/;"	f
itype	shared.h	/^	uint8_t itype;		\/\/ File type$/;"	m	struct:dinode
itype	shared.h	/^	uint8_t itype;      \/\/ File type$/;"	m	struct:inode
iunlock	inode.c	/^void iunlock(struct inode *ip)$/;"	f
iunlockput	inode.c	/^void iunlockput(struct inode *ip)$/;"	f
iupdate	inode.c	/^void iupdate(struct inode *ip)$/;"	f
job	thpool.c	/^typedef struct job{$/;"	s	file:
job	thpool.c	/^} job;$/;"	t	typeref:struct:job	file:
jobqueue	thpool.c	/^	jobqueue  jobqueue;                  \/* job queue                 *\/$/;"	m	struct:thpool_	file:
jobqueue	thpool.c	/^typedef struct jobqueue{$/;"	s	file:
jobqueue	thpool.c	/^} jobqueue;$/;"	t	typeref:struct:jobqueue	file:
jobqueue_clear	thpool.c	/^static void jobqueue_clear(jobqueue* jobqueue_p){$/;"	f	file:
jobqueue_destroy	thpool.c	/^static void jobqueue_destroy(jobqueue* jobqueue_p){$/;"	f	file:
jobqueue_init	thpool.c	/^static int jobqueue_init(jobqueue* jobqueue_p){$/;"	f	file:
jobqueue_pull	thpool.c	/^static struct job* jobqueue_pull(jobqueue* jobqueue_p){$/;"	f	file:
jobqueue_push	thpool.c	/^static void jobqueue_push(jobqueue* jobqueue_p, struct job* newjob){$/;"	f	file:
kcalloc	ds/khash.h	180;"	d
kernfs_stats_t	fs.h	/^} kernfs_stats_t;$/;"	t	typeref:struct:mlfs_kernfs_stats
key	ds/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
key	fs.c	/^	d_replay_key_t key;$/;"	m	struct:directory_replay	file:
key	fs.c	/^	replay_key_t key;$/;"	m	struct:file_replay	file:
key	fs.c	/^	replay_key_t key;$/;"	m	struct:inode_replay	file:
key	fs.c	/^	replay_key_t key;$/;"	m	struct:unlink_replay	file:
key	fs.h	/^	dcache_key_t key; $/;"	m	struct:dirent_block
key	shared.h	/^	block_key_t key;$/;"	m	struct:block_val
key	slru.h	/^	lru_key_t key;$/;"	m	struct:lru_node
keylen	ds/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
kfree	ds/khash.h	189;"	d
kh_begin	ds/khash.h	528;"	d
kh_clear	ds/khash.h	453;"	d
kh_cstr_t	ds/khash.h	/^typedef const char *kh_cstr_t;$/;"	t
kh_del	ds/khash.h	491;"	d
kh_destroy	ds/khash.h	446;"	d
kh_end	ds/khash.h	535;"	d
kh_exist	ds/khash.h	499;"	d
kh_foreach	ds/khash.h	558;"	d
kh_foreach_value	ds/khash.h	572;"	d
kh_get	ds/khash.h	483;"	d
kh_init	ds/khash.h	439;"	d
kh_inline	ds/khash.h	148;"	d
kh_inline	ds/khash.h	150;"	d
kh_int64_hash_equal	ds/khash.h	389;"	d
kh_int64_hash_func	ds/khash.h	385;"	d
kh_int_hash_equal	ds/khash.h	379;"	d
kh_int_hash_func	ds/khash.h	375;"	d
kh_int_hash_func2	ds/khash.h	422;"	d
kh_key	ds/khash.h	507;"	d
kh_n_buckets	ds/khash.h	549;"	d
kh_put	ds/khash.h	474;"	d
kh_resize	ds/khash.h	461;"	d
kh_size	ds/khash.h	542;"	d
kh_str_hash_equal	ds/khash.h	410;"	d
kh_str_hash_func	ds/khash.h	406;"	d
kh_val	ds/khash.h	516;"	d
kh_value	ds/khash.h	521;"	d
khash_t	ds/khash.h	432;"	d
khint32_t	ds/khash.h	/^typedef unsigned int khint32_t;$/;"	t
khint32_t	ds/khash.h	/^typedef unsigned long khint32_t;$/;"	t
khint64_t	ds/khash.h	/^typedef unsigned long khint64_t;$/;"	t
khint64_t	ds/khash.h	/^typedef unsigned long long khint64_t;$/;"	t
khint_t	ds/khash.h	/^typedef khint32_t khint_t;$/;"	t
khiter_t	ds/khash.h	/^typedef khint_t khiter_t;$/;"	t
klib_unused	ds/khash.h	156;"	d
klib_unused	ds/khash.h	158;"	d
kmalloc	ds/khash.h	183;"	d
krealloc	ds/khash.h	186;"	d
kroundup32	ds/khash.h	176;"	d
l1	shared.h	/^	} l1;$/;"	m	struct:inode	typeref:union:inode::__anon1
l1_addrs	shared.h	/^	addr_t l1_addrs[NDIRECT+1];	\/\/direct block addresses: 64 B$/;"	m	struct:dinode
l2	shared.h	/^	} l2;$/;"	m	struct:inode	typeref:union:inode::__anon2
l2_addrs	shared.h	/^	addr_t l2_addrs[NDIRECT+1];	$/;"	m	struct:dinode
l3	shared.h	/^	} l3;$/;"	m	struct:inode	typeref:union:inode::__anon3
l3_addrs	shared.h	/^	addr_t l3_addrs[NDIRECT+1];	$/;"	m	struct:dinode
large_len	ds/xxhash.h	/^   unsigned large_len;$/;"	m	struct:XXH32_state_s
last_block_allocated	shared.h	/^	uint64_t last_block_allocated;$/;"	m	struct:super_block
latch_tree_erase	ds/rbtree_latch.h	/^latch_tree_erase(struct latch_tree_node *node,$/;"	f
latch_tree_find	ds/rbtree_latch.h	/^latch_tree_find(void *key, struct latch_tree_root *root,$/;"	f
latch_tree_insert	ds/rbtree_latch.h	/^latch_tree_insert(struct latch_tree_node *node,$/;"	f
latch_tree_node	ds/rbtree_latch.h	/^struct latch_tree_node {$/;"	s
latch_tree_ops	ds/rbtree_latch.h	/^struct latch_tree_ops {$/;"	s
latch_tree_root	ds/rbtree_latch.h	/^struct latch_tree_root {$/;"	s
lblock	shared.h	/^	uint64_t lblock;$/;"	m	struct:lru_val
le16_add_cpu	mlfs/kerncompat.h	/^static inline void le16_add_cpu(__le16 *var, u16 val)$/;"	f
le16_to_cpu	mlfs/kerncompat.h	393;"	d
le16_to_cpu	mlfs/kerncompat.h	400;"	d
le32_add_cpu	mlfs/kerncompat.h	/^static inline void le32_add_cpu(__le32 *var, u32 val)$/;"	f
le32_to_cpu	mlfs/kerncompat.h	391;"	d
le32_to_cpu	mlfs/kerncompat.h	398;"	d
le64_add_cpu	mlfs/kerncompat.h	/^static inline void le64_add_cpu(__le64 *var, u64 val)$/;"	f
le64_to_cpu	mlfs/kerncompat.h	389;"	d
le64_to_cpu	mlfs/kerncompat.h	396;"	d
le8_to_cpu	mlfs/kerncompat.h	383;"	d
len	storage/spdk/async.c	/^	uint64_t start, len;$/;"	m	struct:spdk_async_io	file:
len	thpool.c	/^	int   len;                           \/* number of jobs in queue   *\/$/;"	m	struct:jobqueue	file:
length	fs.c	/^	uint32_t length;$/;"	m	struct:file_io_vector	file:
length	shared.h	/^	uint32_t length[g_max_blocks_per_operation];$/;"	m	struct:logheader
less	ds/rbtree_latch.h	/^	bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);$/;"	m	struct:latch_tree_ops
libspdk_exit	storage/spdk/common.c	/^void libspdk_exit(void) $/;"	f
libspdk_get_n_lbas	storage/spdk/common.c	/^unsigned int libspdk_get_n_lbas(void) {$/;"	f
libspdk_init	storage/spdk/common.c	/^int libspdk_init(void) $/;"	f
libspdk_init_worker	storage/spdk/common.c	/^static void *libspdk_init_worker(void *arg) $/;"	f	file:
likely	mlfs/kerncompat.h	458;"	d
link	shared.h	/^	struct list_head link;$/;"	m	struct:logheader_meta	typeref:struct:logheader_meta::list_head
linux_dirent	global/types.h	/^struct linux_dirent {$/;"	s
linux_dirent64	global/types.h	/^struct linux_dirent64 {$/;"	s
linux_dirent_tail	global/types.h	/^struct linux_dirent_tail {$/;"	s
list	fs.c	/^	struct list_head list;$/;"	m	struct:block_list	typeref:struct:block_list::list_head	file:
list	fs.c	/^	struct list_head list;$/;"	m	struct:directory_replay	typeref:struct:directory_replay::list_head	file:
list	fs.c	/^	struct list_head list;$/;"	m	struct:file_io_vector	typeref:struct:file_io_vector::list_head	file:
list	fs.c	/^	struct list_head list;$/;"	m	struct:file_replay	typeref:struct:file_replay::list_head	file:
list	fs.c	/^	struct list_head list;$/;"	m	struct:inode_replay	typeref:struct:inode_replay::list_head	file:
list	fs.c	/^	struct list_head list;$/;"	m	struct:unlink_replay	typeref:struct:unlink_replay::list_head	file:
list	slru.h	/^	struct list_head list;$/;"	m	struct:lru_node	typeref:struct:lru_node::list_head
list_add	ds/list.h	/^static inline void list_add(struct list_head *_new, struct list_head *head)$/;"	f
list_add_tail	ds/list.h	/^static inline void list_add_tail(struct list_head *_new, struct list_head *head)$/;"	f
list_cut_position	ds/list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	ds/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	ds/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	ds/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	ds/list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	ds/list.h	374;"	d
list_first_entry	ds/list.h	384;"	d
list_first_entry_or_null	ds/list.h	405;"	d
list_for_each	ds/list.h	429;"	d
list_for_each_entry	ds/list.h	467;"	d
list_for_each_entry_continue	ds/list.h	503;"	d
list_for_each_entry_continue_reverse	ds/list.h	516;"	d
list_for_each_entry_from	ds/list.h	529;"	d
list_for_each_entry_reverse	ds/list.h	477;"	d
list_for_each_entry_safe	ds/list.h	540;"	d
list_for_each_entry_safe_continue	ds/list.h	556;"	d
list_for_each_entry_safe_from	ds/list.h	572;"	d
list_for_each_entry_safe_reverse	ds/list.h	587;"	d
list_for_each_prev	ds/list.h	437;"	d
list_for_each_prev_safe	ds/list.h	457;"	d
list_for_each_safe	ds/list.h	446;"	d
list_head	ds/list.h	/^struct list_head$/;"	s
list_is_last	ds/list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	ds/list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_last_entry	ds/list.h	395;"	d
list_move	ds/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	ds/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_next_entry	ds/list.h	413;"	d
list_prepare_entry	ds/list.h	491;"	d
list_prev_entry	ds/list.h	421;"	d
list_replace	ds/list.h	/^static inline void list_replace(struct list_head *old, struct list_head *_new)$/;"	f
list_replace_init	ds/list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_rotate_left	ds/list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f
list_safe_reset_next	ds/list.h	604;"	d
list_splice	ds/list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	ds/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	ds/list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	ds/list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
lock	concurrency/synchronization.h	/^	int lock;	\/\/ lock variable$/;"	m	struct:mlfs_spinlock
lock	global/ncx_slab.h	/^	pthread_spinlock_t lock;$/;"	m	struct:__anon14
lock_buffer	io/block_io.h	/^static inline void lock_buffer(struct buffer_head *bh)$/;"	f
locked	concurrency/synchronization.h	/^		uint8_t locked;$/;"	m	struct:mlfs_mutex::state
locks_init	fs.c	/^void locks_init(void)$/;"	f
log2_num_buckets	ds/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
log_blocks	shared.h	/^	addr_t log_blocks;$/;"	m	struct:logheader_meta
log_start	shared.h	/^	addr_t log_start;		\/\/ Block number of first log block$/;"	m	struct:disk_superblock
loghdr	shared.h	/^	struct logheader *loghdr;$/;"	m	struct:logheader_meta	typeref:struct:logheader_meta::logheader
loghdr_ext	shared.h	/^	uint8_t loghdr_ext[2048];$/;"	m	struct:logheader_meta
loghdr_meta_t	shared.h	/^} loghdr_meta_t;$/;"	t	typeref:struct:logheader_meta
loghdr_t	shared.h	/^} loghdr_t;$/;"	t	typeref:struct:logheader
logheader	shared.h	/^typedef struct logheader {$/;"	s
logheader_meta	shared.h	/^typedef struct logheader_meta {$/;"	s
lru	slru.h	/^struct lru {$/;"	s
lru_hash	slru.c	/^lru_node_t *lru_hash;$/;"	v
lru_head	slru.h	/^	struct list_head lru_head;$/;"	m	struct:lru	typeref:struct:lru::list_head
lru_heads	shared.h	/^struct list_head *lru_heads;$/;"	v	typeref:struct:list_head
lru_key	shared.h	/^typedef struct lru_key {$/;"	s
lru_key_t	shared.h	/^} lru_key_t;$/;"	t	typeref:struct:lru_key
lru_node	slru.h	/^typedef struct lru_node {$/;"	s
lru_node_t	slru.h	/^} lru_node_t;$/;"	t	typeref:struct:lru_node
lru_val	shared.h	/^typedef struct lru_val {$/;"	s
lru_val_t	shared.h	/^} lru_val_t;$/;"	t	typeref:struct:lru_val
m	concurrency/synchronization.h	/^	mlfs_mutex_t *m;		\/\/ pointer for mutex lock variable.$/;"	m	struct:mlfs_condvar
m_barrier	concurrency/synchronization.h	82;"	d
m_flags	extents.h	/^	uint32_t m_flags;$/;"	m	struct:mlfs_map_blocks
m_lblk	extents.h	/^	mlfs_lblk_t m_lblk;$/;"	m	struct:mlfs_map_blocks
m_len	extents.h	/^	uint32_t m_len;$/;"	m	struct:mlfs_map_blocks
m_pblk	extents.h	/^	mlfs_fsblk_t m_pblk;$/;"	m	struct:mlfs_map_blocks
main	storage/spdk/rw.c	/^int main(int argc, char** argv)$/;"	f
main	storage/spdk/verify.c	/^int main(int argc, char** argv)$/;"	f
main	tests/extent_test.cc	/^int main(int argc, char **argv)$/;"	f
main	tests/fifo_cli.c	/^int main()$/;"	f
main	tests/kernfs.c	/^int main(void)$/;"	f
make-goal	Makefile	/^define make-goal$/;"	m
map_base_addr	io/device.h	/^	uint8_t *map_base_addr; $/;"	m	struct:block_device
mapped_len	storage/storage_dax.c	/^static size_t mapped_len[g_n_devices + 1];$/;"	v	file:
mapped_len	storage/storage_pmem.c	/^static size_t mapped_len[g_n_devices + 1];$/;"	v	file:
mark_dirent_block_dirty	dirent.c	/^static inline int mark_dirent_block_dirty(struct inode *inode, $/;"	f	file:
max	global/util.c	/^int max(int a, int b) { return (a > b)? a: b; }$/;"	f
max	mlfs/kerncompat.h	222;"	d
max3	mlfs/kerncompat.h	228;"	d
max_free_pages	global/ncx_slab.h	/^	size_t max_free_pages;		    $/;"	m	struct:__anon15
max_t	mlfs/kerncompat.h	262;"	d
mem32	ds/xxhash.h	/^   unsigned mem32[4];   \/* buffer defined as U32 for alignment *\/$/;"	m	struct:XXH32_state_s
mem64	ds/xxhash.h	/^   unsigned long long mem64[4];   \/* buffer defined as U64 for alignment *\/$/;"	m	struct:XXH64_state_s
memcpy_tsc	storage/spdk/common.h	/^	uint64_t memcpy_tsc;$/;"	m	struct:mlfs_spdk_stats
memory_order	ds/stdatomic.h	/^enum memory_order {$/;"	g
memory_order	ds/stdatomic.h	/^typedef enum memory_order memory_order;$/;"	t	typeref:enum:memory_order
memory_order_acq_rel	ds/stdatomic.h	/^	memory_order_acq_rel = __ATOMIC_ACQ_REL,$/;"	e	enum:memory_order
memory_order_acquire	ds/stdatomic.h	/^	memory_order_acquire = __ATOMIC_ACQUIRE,$/;"	e	enum:memory_order
memory_order_consume	ds/stdatomic.h	/^	memory_order_consume = __ATOMIC_CONSUME,$/;"	e	enum:memory_order
memory_order_relaxed	ds/stdatomic.h	/^	memory_order_relaxed = __ATOMIC_RELAXED,$/;"	e	enum:memory_order
memory_order_release	ds/stdatomic.h	/^	memory_order_release = __ATOMIC_RELEASE,$/;"	e	enum:memory_order
memory_order_seq_cst	ds/stdatomic.h	/^	memory_order_seq_cst = __ATOMIC_SEQ_CST$/;"	e	enum:memory_order
memsize	ds/xxhash.h	/^   unsigned memsize;$/;"	m	struct:XXH32_state_s
memsize	ds/xxhash.h	/^   unsigned memsize;$/;"	m	struct:XXH64_state_s
might_sleep	io/buffer_head.h	16;"	d
migrate_blocks	migrate.c	/^int migrate_blocks(uint8_t from_dev, uint8_t to_dev, isolated_list_t *migrate_list)$/;"	f
migrate_threshold	migrate.c	/^static int migrate_threshold[g_n_devices + 1] = {0, 91, 95, 100, 0};$/;"	v	file:
min	mlfs/kerncompat.h	217;"	d
min3	mlfs/kerncompat.h	227;"	d
min_not_zero	mlfs/kerncompat.h	235;"	d
min_shift	global/ncx_slab.h	/^	size_t min_shift;$/;"	m	struct:__anon14
min_size	global/ncx_slab.h	/^	size_t min_size;$/;"	m	struct:__anon14
min_t	mlfs/kerncompat.h	257;"	d
mlfs_alloc	global/mem.h	/^static inline void *mlfs_alloc(size_t size)$/;"	f
mlfs_alloc_block_free_lists	balloc.c	/^int mlfs_alloc_block_free_lists(struct super_block *sb)$/;"	f
mlfs_alloc_blocknode	balloc.c	/^struct mlfs_range_node *mlfs_alloc_blocknode(struct super_block *sb)$/;"	f
mlfs_alloc_blocks_in_free_list	balloc.c	/^static unsigned long mlfs_alloc_blocks_in_free_list(struct super_block *sb,$/;"	f	file:
mlfs_alloc_inode_node	balloc.c	/^struct mlfs_range_node *mlfs_alloc_inode_node(struct super_block *sb)$/;"	f
mlfs_alloc_range_node	balloc.c	/^static struct mlfs_range_node *mlfs_alloc_range_node(struct super_block *sb)$/;"	f	file:
mlfs_alloc_shared	global/mem.h	/^static inline void *mlfs_alloc_shared(size_t size)$/;"	f
mlfs_assert	global/defs.h	108;"	d
mlfs_assert	global/defs.h	75;"	d
mlfs_assert	global/defs.h	90;"	d
mlfs_build_blocknode_map	balloc.c	/^int mlfs_build_blocknode_map(struct super_block *sb,$/;"	f
mlfs_can_extents_be_merged	extents.c	/^int mlfs_can_extents_be_merged(struct inode *inode, struct mlfs_extent *ex1,$/;"	f
mlfs_cond_signal	concurrency/condvar.c	/^void mlfs_cond_signal(void *channel)$/;"	f
mlfs_cond_wait	concurrency/condvar.c	/^void mlfs_cond_wait(void *channel)$/;"	f
mlfs_condvar	concurrency/synchronization.h	/^struct mlfs_condvar {$/;"	s
mlfs_condvar_broadcast	concurrency/condvar.c	/^int mlfs_condvar_broadcast(struct mlfs_condvar *cv)$/;"	f
mlfs_condvar_destroy	concurrency/condvar.c	/^int mlfs_condvar_destroy(struct mlfs_condvar *cv)$/;"	f
mlfs_condvar_init	concurrency/condvar.c	/^int mlfs_condvar_init(struct mlfs_condvar *cv)$/;"	f
mlfs_condvar_signal	concurrency/condvar.c	/^int mlfs_condvar_signal(struct mlfs_condvar *cv)$/;"	f
mlfs_condvar_t	concurrency/synchronization.h	/^typedef struct mlfs_condvar mlfs_condvar_t;$/;"	t	typeref:struct:mlfs_condvar
mlfs_condvar_wait	concurrency/condvar.c	/^int mlfs_condvar_wait(struct mlfs_condvar *c, mlfs_mutex_t *m)$/;"	f
mlfs_count_free_blocks	balloc.c	/^unsigned long mlfs_count_free_blocks(struct super_block *sb)$/;"	f
mlfs_crc32c	mlfs_crc32.c	/^mlfs_crc32c(uint32_t crc, const void *buf, size_t size)$/;"	f
mlfs_create_thread	concurrency/thread.c	/^unsigned long mlfs_create_thread(void *(*entry_point)(void *), volatile int* done)$/;"	f
mlfs_debug	global/defs.h	32;"	d
mlfs_debug	global/defs.h	38;"	d
mlfs_delete_free_lists	balloc.c	/^void mlfs_delete_free_lists(struct super_block *sb)$/;"	f
mlfs_dirent	shared.h	/^struct mlfs_dirent {$/;"	s
mlfs_ext_alloc_blocks	extents.c	/^int mlfs_ext_alloc_blocks(handle_t *handle, struct inode *inode,$/;"	f
mlfs_ext_binsearch	extents.c	/^static void mlfs_ext_binsearch(struct inode *inode, struct mlfs_ext_path *path,$/;"	f	file:
mlfs_ext_binsearch_idx	extents.c	/^static void mlfs_ext_binsearch_idx(struct inode *inode,$/;"	f	file:
mlfs_ext_block_csum	extents.c	/^static uint32_t mlfs_ext_block_csum(struct inode *inode,$/;"	f	file:
mlfs_ext_check	extents.c	/^static int mlfs_ext_check(struct inode *inode, struct mlfs_extent_header *eh,$/;"	f	file:
mlfs_ext_check_inode	extents.c	/^int mlfs_ext_check_inode(handle_t *handle, struct inode *inode) $/;"	f
mlfs_ext_convert_to_initialized	extents.c	/^static int mlfs_ext_convert_to_initialized(handle_t *handle,$/;"	f	file:
mlfs_ext_correct_indexes	extents.c	/^static int mlfs_ext_correct_indexes(handle_t *handle,$/;"	f	file:
mlfs_ext_create_new_leaf	extents.c	/^static int mlfs_ext_create_new_leaf(handle_t *handle,$/;"	f	file:
mlfs_ext_determine_hole	extents.c	/^static mlfs_lblk_t mlfs_ext_determine_hole(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_ext_dirty	extents.h	377;"	d
mlfs_ext_drop_refs	extents.c	/^void mlfs_ext_drop_refs(struct mlfs_ext_path *path) $/;"	f
mlfs_ext_find_goal	extents.c	/^static mlfs_fsblk_t mlfs_ext_find_goal(struct inode *inode,$/;"	f	file:
mlfs_ext_get_actual_len	extents.h	/^static inline uint16_t mlfs_ext_get_actual_len(struct mlfs_extent *ext)$/;"	f
mlfs_ext_get_blocks	extents.c	/^int mlfs_ext_get_blocks(handle_t *handle, struct inode *inode, $/;"	f
mlfs_ext_grow_indepth	extents.c	/^static int mlfs_ext_grow_indepth(handle_t *handle,$/;"	f	file:
mlfs_ext_init	extents.c	/^void mlfs_ext_init(struct super_block *sb) {$/;"	f
mlfs_ext_insert_extent	extents.c	/^int mlfs_ext_insert_extent(handle_t *handle, struct inode *inode,$/;"	f
mlfs_ext_insert_index	extents.c	/^static int mlfs_ext_insert_index(handle_t *handle, struct inode *inode, $/;"	f	file:
mlfs_ext_is_unwritten	extents.h	/^static inline int mlfs_ext_is_unwritten(struct mlfs_extent *ext)$/;"	f
mlfs_ext_lblock	extents.h	/^static inline mlfs_lblk_t mlfs_ext_lblock(struct mlfs_extent *ex)$/;"	f
mlfs_ext_mark_initialized	extents.h	/^static inline void mlfs_ext_mark_initialized(struct mlfs_extent *ext)$/;"	f
mlfs_ext_mark_unwritten	extents.h	/^static inline void mlfs_ext_mark_unwritten(struct mlfs_extent *ext)$/;"	f
mlfs_ext_max_entries	extents.c	/^static int mlfs_ext_max_entries(handle_t *handle, struct inode *inode, int depth)$/;"	f	file:
mlfs_ext_more_to_rm	extents.c	/^static int inline mlfs_ext_more_to_rm(struct mlfs_ext_path *path) $/;"	f	file:
mlfs_ext_new_meta_block	extents.c	/^static mlfs_fsblk_t mlfs_ext_new_meta_block(handle_t *handle,$/;"	f	file:
mlfs_ext_next_allocated_block	extents.c	/^mlfs_lblk_t mlfs_ext_next_allocated_block(struct mlfs_ext_path *path) $/;"	f
mlfs_ext_next_leaf_block	extents.c	/^static mlfs_lblk_t mlfs_ext_next_leaf_block(struct mlfs_ext_path *path) $/;"	f	file:
mlfs_ext_path	extents.h	/^struct mlfs_ext_path {$/;"	s
mlfs_ext_pblock	extents.h	/^static inline mlfs_fsblk_t mlfs_ext_pblock(struct mlfs_extent *ex)$/;"	f
mlfs_ext_remove_space	extents.c	/^int mlfs_ext_remove_space(handle_t *handle, struct inode *inode, $/;"	f
mlfs_ext_rm_idx	extents.c	/^int mlfs_ext_rm_idx(handle_t *handle, struct inode *inode,$/;"	f
mlfs_ext_rm_leaf	extents.c	/^static int mlfs_ext_rm_leaf(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_ext_search_left	extents.c	/^static int mlfs_ext_search_left(struct inode *inode, struct mlfs_ext_path *path,$/;"	f	file:
mlfs_ext_search_right	extents.c	/^static int mlfs_ext_search_right(handle_t *handle, struct inode *inode, $/;"	f	file:
mlfs_ext_set_lblock	extents.h	/^static inline void mlfs_ext_set_lblock(struct mlfs_extent *ex,$/;"	f
mlfs_ext_set_pblock	extents.h	/^static inline void mlfs_ext_set_pblock(struct mlfs_extent *ex,$/;"	f
mlfs_ext_show_leaf	extents.c	/^static void mlfs_ext_show_leaf(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_ext_show_leaf	extents.c	806;"	d	file:
mlfs_ext_show_move	extents.c	/^static void mlfs_ext_show_move(handle_t *handle, struct inode *inode, $/;"	f	file:
mlfs_ext_show_move	extents.c	807;"	d	file:
mlfs_ext_show_path	extents.c	/^static void mlfs_ext_show_path(struct inode *inode, struct mlfs_ext_path *path) $/;"	f	file:
mlfs_ext_space_block	extents.c	/^static inline int mlfs_ext_space_block(struct inode *inode, int check) $/;"	f	file:
mlfs_ext_space_block_idx	extents.c	/^static inline int mlfs_ext_space_block_idx(struct inode *inode, int check) $/;"	f	file:
mlfs_ext_space_root	extents.c	/^static inline int mlfs_ext_space_root(struct inode *inode, int check) $/;"	f	file:
mlfs_ext_space_root_idx	extents.c	/^static inline int mlfs_ext_space_root_idx(struct inode *inode, int check)$/;"	f	file:
mlfs_ext_split	extents.c	/^static int mlfs_ext_split(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_ext_store_pblock	extents.h	/^static inline void mlfs_ext_store_pblock(struct mlfs_extent *ex,$/;"	f
mlfs_ext_tree_init	extents.c	/^int mlfs_ext_tree_init(handle_t *handle, struct inode *inode) $/;"	f
mlfs_ext_truncate	extents.c	/^int mlfs_ext_truncate(handle_t *handle, struct inode *inode, $/;"	f
mlfs_ext_try_to_merge	extents.c	/^static void mlfs_ext_try_to_merge(handle_t *handle,$/;"	f	file:
mlfs_ext_try_to_merge_right	extents.c	/^static int mlfs_ext_try_to_merge_right(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_ext_try_to_merge_up	extents.c	/^static void mlfs_ext_try_to_merge_up(handle_t *handle,$/;"	f	file:
mlfs_ext_zeroout	extents.c	/^static int mlfs_ext_zeroout(struct inode *inode, struct mlfs_extent *ex) $/;"	f	file:
mlfs_extent	extents.h	/^struct mlfs_extent {$/;"	s
mlfs_extent_block_csum_set	extents.c	/^static void mlfs_extent_block_csum_set(struct inode *inode,$/;"	f	file:
mlfs_extent_handle	extents.h	/^struct mlfs_extent_handle {$/;"	s
mlfs_extent_header	extents.h	/^struct mlfs_extent_header {$/;"	s
mlfs_extent_idx	extents.h	/^struct mlfs_extent_idx {$/;"	s
mlfs_extent_tail	extents.h	/^struct mlfs_extent_tail {$/;"	s
mlfs_find_extent	extents.c	/^struct mlfs_ext_path *mlfs_find_extent(handle_t *handle,$/;"	f
mlfs_find_free_list	balloc.c	/^static int mlfs_find_free_list(struct super_block *sb, $/;"	f	file:
mlfs_find_free_slot	balloc.c	/^int mlfs_find_free_slot(struct super_block *sb,$/;"	f
mlfs_find_range_node	balloc.c	/^static int mlfs_find_range_node(struct super_block *sb,$/;"	f	file:
mlfs_force_split_extent_at	extents.c	/^static inline int mlfs_force_split_extent_at(handle_t *handle,$/;"	f	file:
mlfs_free	global/mem.h	/^static inline void mlfs_free(void *ptr)$/;"	f
mlfs_free_blocknode	balloc.c	/^static void mlfs_free_blocknode(struct super_block *sb,$/;"	f	file:
mlfs_free_blocks	extents.c	/^static void mlfs_free_blocks(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_free_blocks_node	balloc.c	/^int mlfs_free_blocks_node(struct super_block *sb, unsigned long blocknr,$/;"	f
mlfs_free_range_node	balloc.c	/^static void mlfs_free_range_node(struct mlfs_range_node *node)$/;"	f	file:
mlfs_free_shared	global/mem.h	/^static inline void mlfs_free_shared(void *ptr)$/;"	f
mlfs_fsblk_t	global/types.h	/^typedef uint64_t mlfs_fsblk_t;$/;"	t
mlfs_get_free_list	balloc.c	/^struct free_list *mlfs_get_free_list(struct super_block *sb, int cpu)$/;"	f	file:
mlfs_get_time	fs.c	/^void mlfs_get_time(mlfs_time_t *a) {}$/;"	f
mlfs_handle_dirty_metadata	extents.c	/^static inline int mlfs_handle_dirty_metadata(handle_t *handle, $/;"	f	file:
mlfs_hash_t	global/types.h	/^typedef UT_hash_handle	mlfs_hash_t;$/;"	t
mlfs_idx_lblock	extents.h	/^static inline mlfs_lblk_t mlfs_idx_lblock(struct mlfs_extent_idx *ix)$/;"	f
mlfs_idx_pblock	extents.h	/^static inline mlfs_fsblk_t mlfs_idx_pblock(struct mlfs_extent_idx *ix)$/;"	f
mlfs_idx_set_lblock	extents.h	/^static inline void mlfs_idx_set_lblock(struct mlfs_extent_idx *ix,$/;"	f
mlfs_idx_set_pblock	extents.h	/^static inline void mlfs_idx_set_pblock(struct mlfs_extent_idx *ix,$/;"	f
mlfs_idx_store_pblock	extents.h	/^static inline void mlfs_idx_store_pblock(struct mlfs_extent_idx *ix,$/;"	f
mlfs_info	global/defs.h	42;"	d
mlfs_info	global/defs.h	48;"	d
mlfs_init_blockmap	balloc.c	/^void mlfs_init_blockmap(struct super_block *sb, int initialize)$/;"	f
mlfs_inode_to_goal_block	extents.c	/^static inline mlfs_fsblk_t mlfs_inode_to_goal_block(struct inode *inode) $/;"	f	file:
mlfs_insert_blocknode_map	balloc.c	/^static int mlfs_insert_blocknode_map(struct super_block *sb,$/;"	f	file:
mlfs_insert_blocktree	balloc.c	/^static inline int mlfs_insert_blocktree(struct super_block *sb,$/;"	f	file:
mlfs_insert_range_node	balloc.c	/^static int mlfs_insert_range_node(struct super_block *sb,$/;"	f	file:
mlfs_io_wait	io/block_io.c	/^int mlfs_io_wait(uint8_t dev, int read)$/;"	f
mlfs_kernfs_stats	fs.h	/^typedef struct mlfs_kernfs_stats {$/;"	s
mlfs_lblk_t	global/types.h	/^typedef uint32_t mlfs_lblk_t;$/;"	t
mlfs_log	global/defs.h	18;"	d
mlfs_log	global/defs.h	25;"	d
mlfs_lsm_debug	extents.c	26;"	d	file:
mlfs_lsm_info	extents.c	27;"	d	file:
mlfs_map_blocks	extents.h	/^struct mlfs_map_blocks {$/;"	s
mlfs_mark_inode_dirty	extents.c	/^int mlfs_mark_inode_dirty(struct inode *inode) $/;"	f
mlfs_muffled	global/defs.h	28;"	d
mlfs_mutex	concurrency/synchronization.h	/^union mlfs_mutex$/;"	u
mlfs_mutex_destroy	concurrency/locks.c	/^int mlfs_mutex_destroy(mlfs_mutex_t *mu)$/;"	f
mlfs_mutex_init	concurrency/locks.c	/^int mlfs_mutex_init(mlfs_mutex_t *mu)$/;"	f
mlfs_mutex_lock	concurrency/locks.c	/^int mlfs_mutex_lock(union mlfs_mutex *m)$/;"	f
mlfs_mutex_t	concurrency/synchronization.h	/^typedef union mlfs_mutex mlfs_mutex_t;$/;"	t	typeref:union:mlfs_mutex
mlfs_mutex_trylock	concurrency/locks.c	/^int mlfs_mutex_trylock(mlfs_mutex_t *m)$/;"	f
mlfs_mutex_unlock	concurrency/locks.c	/^int mlfs_mutex_unlock(mlfs_mutex_t *m)$/;"	f
mlfs_new_blocks	balloc.c	/^int mlfs_new_blocks(struct super_block *sb, unsigned long *blocknr,$/;"	f
mlfs_new_data_blocks	extents.c	/^static mlfs_fsblk_t mlfs_new_data_blocks(handle_t *handle,$/;"	f	file:
mlfs_new_meta_blocks	extents.c	/^static mlfs_fsblk_t mlfs_new_meta_blocks(handle_t *handle,$/;"	f	file:
mlfs_nvm_mutex	storage/storage_dax.c	/^pthread_mutex_t mlfs_nvm_mutex;$/;"	v
mlfs_printf	global/defs.h	51;"	d
mlfs_range_node	shared.h	/^struct mlfs_range_node {$/;"	s
mlfs_rbtree_compare_rangenode	balloc.c	/^static inline int mlfs_rbtree_compare_rangenode(struct mlfs_range_node *curr,$/;"	f	file:
mlfs_readahead	io/block_io.c	/^int mlfs_readahead(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
mlfs_remove_blocks	extents.c	/^static int mlfs_remove_blocks(handle_t *handle, struct inode *inode,$/;"	f	file:
mlfs_setup	global/global.c	/^void mlfs_setup(void)$/;"	f
mlfs_slab_init	fs.c	/^void mlfs_slab_init(uint64_t pool_size)$/;"	f
mlfs_slab_pool	fs.c	/^ncx_slab_pool_t *mlfs_slab_pool;$/;"	v
mlfs_slab_pool_shared	fs.c	/^ncx_slab_pool_t *mlfs_slab_pool_shared;$/;"	v
mlfs_spdk_stats	storage/spdk/common.h	/^typedef struct mlfs_spdk_stats$/;"	s
mlfs_spin_lock	concurrency/locks.c	/^void mlfs_spin_lock(struct mlfs_spinlock *lk)$/;"	f
mlfs_spin_unlock	concurrency/locks.c	/^void mlfs_spin_unlock(struct mlfs_spinlock *lk)$/;"	f
mlfs_spinlock	concurrency/synchronization.h	/^struct mlfs_spinlock {$/;"	s
mlfs_spinlock_init	concurrency/locks.c	/^void mlfs_spinlock_init(struct mlfs_spinlock *lk, char *name)$/;"	f
mlfs_split_extent_at	extents.c	/^static int mlfs_split_extent_at(handle_t *handle,$/;"	f	file:
mlfs_time_t	global/types.h	/^typedef struct timeval	mlfs_time_t; \/\/ 16 bytes$/;"	t	typeref:struct:timeval
mlfs_write	io/block_io.c	/^int mlfs_write(struct buffer_head *b)$/;"	f
mlfs_zalloc	global/mem.h	/^static inline void *mlfs_zalloc(size_t size)$/;"	f
monitor_end	storage/storage_dax.c	/^static uint64_t monitor_start = 0, monitor_end = 0, now = 0;$/;"	v	file:
monitor_start	storage/storage_dax.c	/^static uint64_t monitor_start = 0, monitor_end = 0, now = 0;$/;"	v	file:
move_buffer_to_writeback	io/block_io.c	/^static void move_buffer_to_writeback(struct buffer_head *bh)$/;"	f	file:
msg	fs.c	/^	char msg[MAX_SOCK_BUF];$/;"	m	struct:digest_arg	file:
mtime	shared.h	/^	mlfs_time_t mtime;$/;"	m	struct:dinode
mtime	shared.h	/^	mlfs_time_t mtime;$/;"	m	struct:inode
mtime	shared.h	/^	mlfs_time_t mtime;$/;"	m	struct:logheader
mutex	concurrency/synchronization.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cond_channel
mutex	shared.h	/^	pthread_mutex_t mutex;$/;"	m	struct:free_list
mutex	thpool.c	/^	pthread_mutex_t mutex;$/;"	m	struct:bsem	file:
n	ds/utarray.h	/^    unsigned i,n;\/* i: index of next available slot, n: num slots *\/$/;"	m	struct:__anon9
n	fs.c	/^	int n;$/;"	m	struct:directory_replay	file:
n	fs.c	/^	uint32_t n;$/;"	m	struct:block_list	file:
n	migrate.h	/^	uint32_t n;$/;"	m	struct:isolated_list
n	shared.h	/^	uint8_t n;$/;"	m	struct:logheader
n	slru.h	/^	uint64_t n;$/;"	m	struct:lru
n_de_cache_entry	shared.h	/^	uint32_t n_de_cache_entry;$/;"	m	struct:inode
n_digest	fs.h	/^	uint64_t n_digest;$/;"	m	struct:mlfs_kernfs_stats
n_digest_skipped	fs.h	/^	uint64_t n_digest_skipped;$/;"	m	struct:mlfs_kernfs_stats
n_fcache_entries	shared.h	/^	uint32_t n_fcache_entries;$/;"	m	struct:inode
n_list	fs.c	/^	uint32_t n_list;$/;"	m	struct:file_io_vector	file:
n_partition	shared.h	/^	uint32_t n_partition;$/;"	m	struct:super_block
name	concurrency/synchronization.h	/^	char name[CONDVAR_NAME_SIZE];$/;"	m	struct:cond_channel
name	concurrency/synchronization.h	/^	char name[LOCK_NAME_SIZE]; \/\/ Name of lock (for debugging).$/;"	m	struct:mlfs_spinlock
name	fs.h	/^	char name[DIRSIZ]; \/\/ key$/;"	m	struct:dirent_data
name	shared.h	/^  char name[DIRSIZ];$/;"	m	struct:mlfs_dirent
name	storage/spdk/common.h	/^	char			name[1024];$/;"	m	struct:ctrlr_entry
namecmp	dirent.c	/^int namecmp(const char *s, const char *t)$/;"	f
namei	dirent.c	/^struct inode* namei(char *path)$/;"	f
nameiparent	dirent.c	/^struct inode* nameiparent(char *path, char *name)$/;"	f
namex	dirent.c	/^static struct inode* namex(char *path, int nameiparent, char *name)$/;"	f	file:
ncx_align	global/ncx_core.h	25;"	d
ncx_align_ptr	global/ncx_core.h	26;"	d
ncx_int_t	global/ncx_core.h	/^typedef intptr_t ncx_int_t;$/;"	t
ncx_memset	global/ncx_core.h	30;"	d
ncx_memzero	global/ncx_core.h	29;"	d
ncx_pagesize	global/ncx_slab.c	/^static ncx_uint_t ncx_pagesize;$/;"	v	file:
ncx_pagesize_shift	global/ncx_slab.c	/^static ncx_uint_t ncx_pagesize_shift;$/;"	v	file:
ncx_real_pages	global/ncx_slab.c	/^static ncx_uint_t ncx_real_pages;$/;"	v	file:
ncx_slab_alloc	global/ncx_slab.c	/^void *ncx_slab_alloc(ncx_slab_pool_t *pool, size_t size) {$/;"	f
ncx_slab_alloc_locked	global/ncx_slab.c	/^void *ncx_slab_alloc_locked(ncx_slab_pool_t *pool, size_t size) {$/;"	f
ncx_slab_alloc_pages	global/ncx_slab.c	/^static ncx_slab_page_t *ncx_slab_alloc_pages(ncx_slab_pool_t *pool,$/;"	f	file:
ncx_slab_dummy_init	global/ncx_slab.c	/^void ncx_slab_dummy_init(ncx_slab_pool_t *pool) {$/;"	f
ncx_slab_empty	global/ncx_slab.c	/^static bool ncx_slab_empty(ncx_slab_pool_t *pool, ncx_slab_page_t *page) {$/;"	f	file:
ncx_slab_exact_shift	global/ncx_slab.c	/^static ncx_uint_t ncx_slab_exact_shift;$/;"	v	file:
ncx_slab_exact_size	global/ncx_slab.c	/^static ncx_uint_t ncx_slab_exact_size;$/;"	v	file:
ncx_slab_free	global/ncx_slab.c	/^void ncx_slab_free(ncx_slab_pool_t *pool, void *p) {$/;"	f
ncx_slab_free_locked	global/ncx_slab.c	/^void ncx_slab_free_locked(ncx_slab_pool_t *pool, void *p) {$/;"	f
ncx_slab_free_pages	global/ncx_slab.c	/^static void ncx_slab_free_pages(ncx_slab_pool_t *pool, ncx_slab_page_t *page,$/;"	f	file:
ncx_slab_init	global/ncx_slab.c	/^void ncx_slab_init(ncx_slab_pool_t *pool) {$/;"	f
ncx_slab_junk	global/ncx_slab.c	37;"	d	file:
ncx_slab_junk	global/ncx_slab.c	39;"	d	file:
ncx_slab_lock	global/ncx_lock.h	6;"	d
ncx_slab_max_size	global/ncx_slab.c	/^static ncx_uint_t ncx_slab_max_size;$/;"	v	file:
ncx_slab_page_s	global/ncx_slab.h	/^struct ncx_slab_page_s {$/;"	s
ncx_slab_page_t	global/ncx_slab.h	/^typedef struct ncx_slab_page_s ncx_slab_page_t;$/;"	t	typeref:struct:ncx_slab_page_s
ncx_slab_pool_t	global/ncx_slab.h	/^} ncx_slab_pool_t;$/;"	t	typeref:struct:__anon14
ncx_slab_stat	global/ncx_slab.c	/^void ncx_slab_stat(ncx_slab_pool_t *pool, ncx_slab_stat_t *stat) {$/;"	f
ncx_slab_stat_t	global/ncx_slab.h	/^} ncx_slab_stat_t;$/;"	t	typeref:struct:__anon15
ncx_slab_unlock	global/ncx_lock.h	9;"	d
ncx_uint_t	global/ncx_core.h	/^typedef uintptr_t ncx_uint_t;$/;"	t
ndatablocks	shared.h	/^	uint64_t ndatablocks;		\/\/ Number of data blocks$/;"	m	struct:disk_superblock
next	ds/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	ds/list.h	/^	struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	ds/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
next	global/ncx_slab.h	/^	ncx_slab_page_t *next;$/;"	m	struct:ncx_slab_page_s
next	storage/spdk/common.h	/^	struct ctrlr_entry	*next;$/;"	m	struct:ctrlr_entry	typeref:struct:ctrlr_entry::ctrlr_entry
next	storage/spdk/common.h	/^	struct ns_entry		*next;$/;"	m	struct:ns_entry	typeref:struct:ns_entry::ns_entry
next_loghdr_blkno	shared.h	/^	addr_t next_loghdr_blkno;$/;"	m	struct:logheader
ninodes	shared.h	/^	uint32_t ninodes;			\/\/ Number of inodes.$/;"	m	struct:disk_superblock
nlink	shared.h	/^	uint8_t nlink;		\/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	shared.h	/^	uint8_t nlink;      \/\/ Number of links to inode in file system$/;"	m	struct:inode
nlog	shared.h	/^	uint64_t nlog;			\/\/ Number of log blocks$/;"	m	struct:disk_superblock
node	ds/rbtree_latch.h	/^	struct rb_node node[2];$/;"	m	struct:latch_tree_node	typeref:struct:latch_tree_node::rb_node
node	shared.h	/^	struct rb_node node;$/;"	m	struct:mlfs_range_node	typeref:struct:mlfs_range_node::rb_node
node_type	fs.c	/^	uint8_t node_type;$/;"	m	struct:directory_replay	file:
node_type	fs.c	/^	uint8_t node_type;$/;"	m	struct:file_replay	file:
node_type	fs.c	/^	uint8_t node_type;$/;"	m	struct:inode_replay	file:
node_type	fs.c	/^	uint8_t node_type;$/;"	m	struct:unlink_replay	file:
noexpand	ds/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
noinline	mlfs/kerncompat.h	423;"	d
nonideal_items	ds/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
now	storage/storage_dax.c	/^static uint64_t monitor_start = 0, monitor_end = 0, now = 0;$/;"	v	file:
nr_bits	balloc.h	/^	uint64_t nr_bits;$/;"	m	struct:block_bitmap
nr_iovec	shared.h	/^	uint32_t nr_iovec;$/;"	m	struct:logheader_meta
nr_log_blocks	shared.h	/^	uint32_t nr_log_blocks;$/;"	m	struct:logheader_meta
ns	storage/spdk/common.h	/^	struct spdk_nvme_ns	*ns;$/;"	m	struct:ns_entry	typeref:struct:ns_entry::spdk_nvme_ns
ns_entry	storage/spdk/common.h	/^struct ns_entry {$/;"	s
num_blocknode	shared.h	/^	unsigned long   num_blocknode;$/;"	m	struct:free_list
num_blocks	shared.h	/^	uint64_t num_blocks;$/;"	m	struct:super_block
num_buckets	ds/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_free_blocks	shared.h	/^	unsigned long   num_free_blocks;$/;"	m	struct:free_list
num_items	ds/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
num_threads_alive	thpool.c	/^	volatile int num_threads_alive;      \/* threads currently alive   *\/$/;"	m	struct:thpool_	file:
num_threads_working	thpool.c	/^	volatile int num_threads_working;    \/* threads currently working *\/$/;"	m	struct:thpool_	file:
offset	fs.c	/^	offset_t offset;$/;"	m	struct:file_io_vector	file:
offset	fs.h	/^	offset_t offset;$/;"	m	struct:dirent_data
offset	fs.h	/^	uint32_t offset; \/\/ offset of directory inode \/ 4096.$/;"	m	struct:dcache_key
offset_t	global/types.h	/^typedef uint64_t		offset_t;$/;"	t
ondisk	shared.h	/^	struct disk_superblock *ondisk;$/;"	m	struct:super_block	typeref:struct:super_block::disk_superblock
oom	ds/utarray.h	42;"	d
p_bh	extents.h	/^	struct buffer_head *p_bh;$/;"	m	struct:mlfs_ext_path	typeref:struct:mlfs_ext_path::buffer_head
p_big	global/ncx_slab.h	/^	size_t p_small, p_exact, p_big, p_page; $/;"	m	struct:__anon15
p_block	extents.h	/^	mlfs_fsblk_t p_block;$/;"	m	struct:mlfs_ext_path
p_depth	extents.h	/^	uint16_t p_depth;$/;"	m	struct:mlfs_ext_path
p_exact	global/ncx_slab.h	/^	size_t p_small, p_exact, p_big, p_page; $/;"	m	struct:__anon15
p_ext	extents.h	/^	struct mlfs_extent *p_ext;$/;"	m	struct:mlfs_ext_path	typeref:struct:mlfs_ext_path::mlfs_extent
p_hdr	extents.h	/^	struct mlfs_extent_header *p_hdr;$/;"	m	struct:mlfs_ext_path	typeref:struct:mlfs_ext_path::mlfs_extent_header
p_idx	extents.h	/^	struct mlfs_extent_idx *p_idx;$/;"	m	struct:mlfs_ext_path	typeref:struct:mlfs_ext_path::mlfs_extent_idx
p_maxdepth	extents.h	/^	uint16_t p_maxdepth;$/;"	m	struct:mlfs_ext_path
p_page	global/ncx_slab.h	/^	size_t p_small, p_exact, p_big, p_page; $/;"	m	struct:__anon15
p_small	global/ncx_slab.h	/^	size_t p_small, p_exact, p_big, p_page; $/;"	m	struct:__anon15
pad	global/types.h	/^	char                pad;$/;"	m	struct:linux_dirent_tail
pages	global/ncx_slab.h	/^	ncx_slab_page_t *pages;$/;"	m	struct:__anon14
pages	global/ncx_slab.h	/^	size_t pages, free_page;$/;"	m	struct:__anon15
panic	global/defs.h	60;"	d
path_search_tsc	fs.h	/^	uint64_t path_search_tsc;$/;"	m	struct:mlfs_kernfs_stats
per_inode_list	slru.h	/^	struct list_head per_inode_list;$/;"	m	struct:lru_node	typeref:struct:lru_node::list_head
per_list_blocks	shared.h	/^	unsigned long per_list_blocks;$/;"	m	struct:super_block
perfmodel_add_delay	storage/storage_dax.c	/^static void perfmodel_add_delay(int read, size_t size)$/;"	f	file:
persist_dirty_dirent_block	dirent.c	/^int persist_dirty_dirent_block(struct inode *inode)$/;"	f
persist_dirty_objects_hdd	fs.c	/^static int persist_dirty_objects_hdd(void) $/;"	f	file:
persist_dirty_objects_nvm	fs.c	/^static int persist_dirty_objects_nvm(void) $/;"	f	file:
persist_dirty_objects_ssd	fs.c	/^static int persist_dirty_objects_ssd(void) $/;"	f	file:
pipeclose	global/util.c	/^void pipeclose(struct pipe *p, int writable)$/;"	f
piperead	global/util.c	/^int piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	global/util.c	/^int pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pmem_addr	storage/storage_pmem.c	/^static uint8_t *pmem_addr[g_n_devices + 1];$/;"	v	file:
pmem_erase	storage/storage_pmem.c	/^int pmem_erase(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
pmem_exit	storage/storage_pmem.c	/^void pmem_exit(uint8_t dev)$/;"	f
pmem_init	storage/storage_pmem.c	/^uint8_t *pmem_init(uint8_t dev, char *dev_path)$/;"	f
pmem_read	storage/storage_pmem.c	/^int pmem_read(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
pmem_write	storage/storage_pmem.c	/^int pmem_write(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
pmem_write_unaligned	storage/storage_pmem.c	/^int pmem_write_unaligned(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t offset, $/;"	f
pool_size	global/ncx_slab.h	/^	size_t pool_size, used_size, used_pct;$/;"	m	struct:__anon15
pos	shared.h	/^	uint32_t pos; \/\/ 0 <= pos <= nr_log_blocks$/;"	m	struct:logheader_meta
pprev	ds/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prev	ds/list.h	/^	struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
prev	ds/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
prev	global/ncx_slab.h	/^	uintptr_t prev;$/;"	m	struct:ncx_slab_page_s
prev	thpool.c	/^	struct job*  prev;                   \/* pointer to previous job   *\/$/;"	m	struct:job	typeref:struct:job::job	file:
previous_path	shared.h	/^	struct mlfs_ext_path *previous_path;$/;"	m	struct:inode	typeref:struct:inode::mlfs_ext_path
print_trace	mlfs/kerncompat.h	/^static inline void print_trace(void)$/;"	f
probe_cb	storage/spdk/common.c	/^bool probe_cb(void *cb_ctx, const struct spdk_nvme_transport_id *trid,$/;"	f
propagate	ds/rbtree_augmented.h	/^	void (*propagate)(struct rb_node *node, struct rb_node *stop);$/;"	m	struct:rb_augment_callbacks
pthread	thpool.c	/^	pthread_t pthread;                   \/* pointer to actual thread  *\/$/;"	m	struct:thread	file:
put_bh	io/block_io.h	/^static inline void put_bh(struct buffer_head *bh)$/;"	f
put_bh_and_read	io/block_io.h	/^static inline int put_bh_and_read(struct buffer_head *bh)$/;"	f
put_unaligned_le16	mlfs/kerncompat.h	410;"	d
put_unaligned_le32	mlfs/kerncompat.h	412;"	d
put_unaligned_le64	mlfs/kerncompat.h	414;"	d
put_unaligned_le8	mlfs/kerncompat.h	408;"	d
qpair	storage/spdk/common.h	/^	struct spdk_nvme_qpair  *qpair;$/;"	m	struct:ns_entry	typeref:struct:ns_entry::spdk_nvme_qpair
ra	storage/spdk/async.c	/^} ra;$/;"	v	typeref:struct:readahead	file:
ra_buf	storage/spdk/async.c	/^	uint8_t *ra_buf;$/;"	m	struct:readahead	file:
ra_issued	storage/spdk/async.c	/^	unsigned int ra_issued;$/;"	m	struct:spdk_async_data	file:
ramdisk_erase	storage/storage_ramdisk.c	/^int ramdisk_erase(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
ramdisk_exit	storage/storage_ramdisk.c	/^void ramdisk_exit(uint8_t dev)$/;"	f
ramdisk_init	storage/storage_ramdisk.c	/^uint8_t *ramdisk_init(uint8_t dev, char *dev_path)$/;"	f
ramdisk_read	storage/storage_ramdisk.c	/^int ramdisk_read(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
ramdisk_write	storage/storage_ramdisk.c	/^int ramdisk_write(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
range_high	shared.h	/^	unsigned long range_high;$/;"	m	struct:mlfs_range_node
range_low	shared.h	/^	unsigned long range_low;$/;"	m	struct:mlfs_range_node
rb_augment_callbacks	ds/rbtree_augmented.h	/^struct rb_augment_callbacks {$/;"	s
rb_color	ds/rbtree_augmented.h	104;"	d
rb_entry	ds/rbtree.h	53;"	d
rb_entry_safe	ds/rbtree.h	93;"	d
rb_erase	ds/rbtree.c	/^EXPORT_SYMBOL(rb_erase);$/;"	v
rb_erase	ds/rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_erase_augmented	ds/rbtree_augmented.h	/^rb_erase_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
rb_first	ds/rbtree.c	/^EXPORT_SYMBOL(rb_first);$/;"	v
rb_first	ds/rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_first_postorder	ds/rbtree.c	/^EXPORT_SYMBOL(rb_first_postorder);$/;"	v
rb_first_postorder	ds/rbtree.c	/^struct rb_node *rb_first_postorder(const struct rb_root *root)$/;"	f
rb_insert	ds/rbtree.c	/^int rb_insert(struct rb_root *root, struct rb_node *node,$/;"	f
rb_insert_augmented	ds/rbtree_augmented.h	/^rb_insert_augmented(struct rb_node *node, struct rb_root *root,$/;"	f
rb_insert_color	ds/rbtree.c	/^EXPORT_SYMBOL(rb_insert_color);$/;"	v
rb_insert_color	ds/rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	ds/rbtree_augmented.h	106;"	d
rb_is_red	ds/rbtree_augmented.h	105;"	d
rb_last	ds/rbtree.c	/^EXPORT_SYMBOL(rb_last);$/;"	v
rb_last	ds/rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	ds/rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_left_deepest_node	ds/rbtree.c	/^static struct rb_node *rb_left_deepest_node(const struct rb_node *node)$/;"	f	file:
rb_link_node	ds/rbtree.h	/^static inline void rb_link_node(struct rb_node *node, struct rb_node *parent,$/;"	f
rb_next	ds/rbtree.c	/^EXPORT_SYMBOL(rb_next);$/;"	v
rb_next	ds/rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_next_postorder	ds/rbtree.c	/^EXPORT_SYMBOL(rb_next_postorder);$/;"	v
rb_next_postorder	ds/rbtree.c	/^struct rb_node *rb_next_postorder(const struct rb_node *node)$/;"	f
rb_node	ds/rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	ds/rbtree.h	/^struct rb_node {$/;"	s
rb_parent	ds/rbtree.h	50;"	d
rb_prev	ds/rbtree.c	/^EXPORT_SYMBOL(rb_prev);$/;"	v
rb_prev	ds/rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_red_parent	ds/rbtree.c	/^static inline struct rb_node *rb_red_parent(struct rb_node *red)$/;"	f	file:
rb_replace_node	ds/rbtree.c	/^EXPORT_SYMBOL(rb_replace_node);$/;"	v
rb_replace_node	ds/rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *_new,$/;"	f
rb_right	ds/rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	ds/rbtree.h	/^struct rb_root {$/;"	s
rb_set_black	ds/rbtree.c	/^static inline void rb_set_black(struct rb_node *rb)$/;"	f	file:
rb_set_parent	ds/rbtree_augmented.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_parent_color	ds/rbtree_augmented.h	/^static inline void rb_set_parent_color(struct rb_node *rb,$/;"	f
rbtree_postorder_for_each_entry_safe	ds/rbtree.h	115;"	d
read	storage/storage.h	/^	int (*read)(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size);$/;"	m	struct:storage_operations
read_all_bitmap	balloc.c	/^struct block_bitmap *read_all_bitmap(uint8_t dev, $/;"	f
read_buffer	storage/spdk/async.c	/^static uint8_t *read_buffer;$/;"	v	file:
read_buffer_pointer	storage/spdk/async.c	/^static uint32_t read_buffer_pointer = 0;$/;"	v	file:
read_extent_tree_block	extents.c	/^static struct buffer_head *read_extent_tree_block(handle_t *handle,$/;"	f	file:
read_issued	storage/spdk/async.c	/^	unsigned int read_issued;$/;"	m	struct:spdk_async_data	file:
read_log_header	fs.c	/^loghdr_meta_t *read_log_header(uint8_t from_dev, addr_t hdr_addr)$/;"	f
read_ondisk_inode	inode.c	/^int read_ondisk_inode(uint8_t dev, uint32_t inum, struct dinode *dip)$/;"	f
read_qpair	storage/spdk/async.c	/^static struct spdk_nvme_qpair *read_qpair;$/;"	v	typeref:struct:spdk_nvme_qpair	file:
read_root_inode	inode.c	/^void read_root_inode(uint8_t dev_id)$/;"	f
read_superblock	fs.c	/^void read_superblock(uint8_t dev)$/;"	f
read_unaligned	storage/storage.h	/^	int (*read_unaligned)(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t offset,$/;"	m	struct:storage_operations
readahead	storage/spdk/async.c	/^static struct readahead {$/;"	s	file:
readahead	storage/storage.h	/^	int (*readahead)(uint8_t dev, addr_t blockno, uint32_t io_size);$/;"	m	struct:storage_operations
rear	thpool.c	/^	job  *rear;                          \/* pointer to rear  of queue *\/$/;"	m	struct:jobqueue	file:
reclaim_buffer	io/block_io.c	/^static void reclaim_buffer(struct buffer_head *bh)$/;"	f	file:
register_ns	storage/spdk/common.c	/^void register_ns(struct spdk_nvme_ctrlr *ctrlr, struct spdk_nvme_ns *ns) $/;"	f
remove_buffer_from_writeback	io/block_io.c	/^void remove_buffer_from_writeback(struct buffer_head *bh)$/;"	f
remove_first_bh_from_freelist	io/block_io.c	/^static void remove_first_bh_from_freelist(struct block_device *bdev)$/;"	f	file:
remove_first_buffer_from_ioqueue	io/block_io.c	/^remove_first_buffer_from_ioqueue(struct block_device *bdev)$/;"	f	file:
remove_first_buffer_from_writeback	io/block_io.c	/^remove_first_buffer_from_writeback(struct block_device *bdev)$/;"	f	file:
replay_key_t	fs.c	/^} replay_key_t;$/;"	t	typeref:struct:replay_node_key	file:
replay_list	fs.c	/^struct replay_list {$/;"	s	file:
replay_node_key	fs.c	/^typedef struct replay_node_key$/;"	s	file:
replay_time_tsc	fs.h	/^	uint64_t replay_time_tsc;$/;"	m	struct:mlfs_kernfs_stats
reserved	ds/xxhash.h	/^   unsigned reserved;   \/* never read nor write, will be removed in a future version *\/$/;"	m	struct:XXH32_state_s
reserved	ds/xxhash.h	/^   unsigned reserved[2];          \/* never read nor write, will be removed in a future version *\/$/;"	m	struct:XXH64_state_s
reserved_blocks	shared.h	/^	uint32_t reserved_blocks;$/;"	m	struct:super_block
rol16	ds/bitops.h	/^static inline __u16 rol16(__u16 word, unsigned int shift)$/;"	f
rol32	ds/bitops.h	/^static inline __u32 rol32(__u32 word, unsigned int shift)$/;"	f
rol64	ds/bitops.h	/^static inline __u64 rol64(__u64 word, unsigned int shift)$/;"	f
rol8	ds/bitops.h	/^static inline __u8 rol8(__u8 word, unsigned int shift)$/;"	f
ror16	ds/bitops.h	/^static inline __u16 ror16(__u16 word, unsigned int shift)$/;"	f
ror32	ds/bitops.h	/^static inline __u32 ror32(__u32 word, unsigned int shift)$/;"	f
ror64	ds/bitops.h	/^static inline __u64 ror64(__u64 word, unsigned int shift)$/;"	f
ror8	ds/bitops.h	/^static inline __u8 ror8(__u8 word, unsigned int shift)$/;"	f
rotate	ds/rbtree_augmented.h	/^	void (*rotate)(struct rb_node *old, struct rb_node *_new);$/;"	m	struct:rb_augment_callbacks
round_down	mlfs/kerncompat.h	309;"	d
round_up	mlfs/kerncompat.h	308;"	d
rounddown	mlfs/kerncompat.h	331;"	d
roundup	mlfs/kerncompat.h	325;"	d
run_ftruncate_test	tests/extent_test.cc	/^void ExtentTest::run_ftruncate_test(mlfs_lblk_t from, $/;"	f	class:ExtentTest
run_multi_block_test	tests/extent_test.cc	/^void ExtentTest::run_multi_block_test(mlfs_lblk_t from, $/;"	f	class:ExtentTest
run_read_block_test	tests/extent_test.cc	/^void ExtentTest::run_read_block_test(uint32_t inum, mlfs_lblk_t from, $/;"	f	class:ExtentTest
rwmutex	thpool.c	/^	pthread_mutex_t rwmutex;             \/* used for queue r\/w access *\/$/;"	m	struct:jobqueue	file:
s32	mlfs/kerncompat.h	/^typedef int s32;$/;"	t
s64	mlfs/kerncompat.h	/^typedef long long s64;$/;"	t
s_bdev	shared.h	/^	struct block_device *s_bdev;$/;"	m	struct:super_block	typeref:struct:super_block::block_device
s_blk_bitmap	shared.h	/^	struct block_bitmap *s_blk_bitmap;$/;"	m	struct:super_block	typeref:struct:super_block::block_bitmap
s_dirty_root	shared.h	/^	struct rb_root s_dirty_root;$/;"	m	struct:super_block	typeref:struct:super_block::rb_root
s_inode_bitmap	shared.h	/^	unsigned long *s_inode_bitmap;$/;"	m	struct:super_block
sb	fs.c	/^struct super_block *sb[g_n_devices];$/;"	v	typeref:struct:super_block
sb_getblk	io/block_io.h	/^static inline struct buffer_head *sb_getblk(uint8_t dev,$/;"	f
seq	concurrency/synchronization.h	/^	int seq;	\/\/sequence lock.$/;"	m	struct:mlfs_condvar
seq	ds/rbtree_latch.h	/^	seqcount_t	seq;$/;"	m	struct:latch_tree_root
set_bit	ds/bitops_arch.h	/^set_bit(long nr, volatile unsigned long *addr)$/;"	f
set_mask_bits	ds/bitops.h	213;"	d
set_periodic_timer	concurrency/timer.c	/^void set_periodic_timer(long delay) $/;"	f
setup_ondisk_inode	shared.h	167;"	d
shared_free_list	shared.h	/^	struct free_list shared_free_list;$/;"	m	struct:super_block	typeref:struct:super_block::free_list
shared_memory_init	fs.c	/^static void shared_memory_init(void)$/;"	f	file:
shm_base	fs.c	/^uint8_t *shm_base;$/;"	v
shm_fd	fs.c	/^int shm_fd = 0;$/;"	v
show_kernfs_stats	fs.c	/^void show_kernfs_stats(void)$/;"	f
show_spdk_stats	storage/spdk/common.c	/^void show_spdk_stats(void)$/;"	f
show_storage_stats	fs.c	/^void show_storage_stats(void)$/;"	f
shutdown_fs	fs.c	/^void shutdown_fs(void)$/;"	f
shutdown_timer	concurrency/timer.c	/^void shutdown_timer() $/;"	f
sign_extend32	ds/bitops.h	/^static inline __s32 sign_extend32(__u32 value, int index)$/;"	f
sign_extend64	ds/bitops.h	/^static inline __s64 sign_extend64(__u64 value, int index)$/;"	f
signature	ds/uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
size	shared.h	/^	uint32_t size;$/;"	m	struct:io_vec
size	shared.h	/^	uint64_t size;			\/\/ Size of file system image (blocks)$/;"	m	struct:disk_superblock
size	shared.h	/^	uint64_t size;		\/\/ Size of file (bytes)$/;"	m	struct:dinode
size	shared.h	/^	uint64_t size;      \/\/ Size of file (bytes)$/;"	m	struct:inode
size	storage/spdk/async.c	/^	uint32_t size;$/;"	m	struct:readahead	file:
size	storage/spdk/sync.h	/^	int size;$/;"	m	struct:spdk_sync_io
size_of_bitmap	balloc.c	/^uint64_t size_of_bitmap(mlfs_fsblk_t nrblocks)$/;"	f
slab	global/ncx_slab.h	/^	uintptr_t slab;$/;"	m	struct:ncx_slab_page_s
slru_upsert	slru.c	/^int slru_upsert(struct inode *inode, struct list_head *lru_head, lru_key_t k, lru_val_t v) $/;"	f
small_const_nbits	ds/bitmap.h	196;"	d
sock_fd	fs.c	/^	int sock_fd;$/;"	m	struct:digest_arg	file:
spdk_async_data	storage/spdk/async.c	/^static struct spdk_async_data {$/;"	s	file:
spdk_async_get_n_lbas	storage/spdk/async.c	/^unsigned int spdk_async_get_n_lbas(void) $/;"	f
spdk_async_io	storage/spdk/async.c	/^struct spdk_async_io {$/;"	s	file:
spdk_async_io_exit	storage/spdk/async.c	/^void spdk_async_io_exit(void) $/;"	f
spdk_async_io_init	storage/spdk/async.c	/^int spdk_async_io_init(void)$/;"	f
spdk_async_io_read	storage/spdk/async.c	/^int spdk_async_io_read(uint8_t *guest_buffer, unsigned long blockno, $/;"	f
spdk_async_io_read_callback	storage/spdk/async.c	/^static void spdk_async_io_read_callback(void *arg,$/;"	f	file:
spdk_async_io_write	storage/spdk/async.c	/^int spdk_async_io_write(uint8_t *guest_buffer, unsigned long blockno, $/;"	f
spdk_async_io_write_callback	storage/spdk/async.c	/^static void spdk_async_io_write_callback(void *arg,$/;"	f	file:
spdk_async_readahead	storage/spdk/async.c	/^int spdk_async_readahead(unsigned long blockno, unsigned int io_size)$/;"	f
spdk_async_readahead_callback	storage/spdk/async.c	/^static void spdk_async_readahead_callback(void *arg,$/;"	f	file:
spdk_erase	storage/storage_spdk.c	/^int spdk_erase(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
spdk_exit	storage/storage_spdk.c	/^void spdk_exit(uint8_t dev)$/;"	f
spdk_get_cpu_clock_speed	storage/spdk/common.c	/^float spdk_get_cpu_clock_speed(void)$/;"	f
spdk_init	storage/storage_spdk.c	/^uint8_t *spdk_init(uint8_t dev, char *dev_path)$/;"	f
spdk_io_trim	storage/spdk/async.c	/^int spdk_io_trim(unsigned long blockno, unsigned int n_bytes)$/;"	f
spdk_process_completions	storage/spdk/async.c	/^int spdk_process_completions(int read) $/;"	f
spdk_read	storage/storage_spdk.c	/^int spdk_read(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
spdk_readahead	storage/storage_spdk.c	/^int spdk_readahead(uint8_t dev, addr_t blockno, uint32_t io_size)$/;"	f
spdk_readahead_completions	storage/spdk/async.c	/^static int spdk_readahead_completions(void)$/;"	f	file:
spdk_stats_t	storage/spdk/common.h	/^} spdk_stats_t;$/;"	t	typeref:struct:mlfs_spdk_stats
spdk_sync_get_n_lbas	storage/spdk/sync.c	/^unsigned int spdk_sync_get_n_lbas(void) {$/;"	f
spdk_sync_io	storage/spdk/sync.h	/^struct spdk_sync_io {$/;"	s
spdk_sync_io_exit	storage/spdk/sync.c	/^void spdk_sync_io_exit(void) { libspdk_exit(); }$/;"	f
spdk_sync_io_init	storage/spdk/sync.c	/^int spdk_sync_io_init(void) { return libspdk_init(); }$/;"	f
spdk_sync_io_read	storage/spdk/sync.c	/^int spdk_sync_io_read(uint8_t *guest_buffer, uint32_t blockno, uint32_t io_size,$/;"	f
spdk_sync_io_read_callback	storage/spdk/sync.c	/^static void spdk_sync_io_read_callback(void *arg,$/;"	f	file:
spdk_sync_io_trim_callback	storage/spdk/async.c	/^static void spdk_sync_io_trim_callback(void *arg, $/;"	f	file:
spdk_sync_io_write	storage/spdk/sync.c	/^int spdk_sync_io_write(uint8_t *guest_buffer, uint32_t blockno, uint32_t io_size,$/;"	f
spdk_sync_io_write_callback	storage/spdk/sync.c	/^static void spdk_sync_io_write_callback($/;"	f	file:
spdk_wait_completions	storage/spdk/async.c	/^void spdk_wait_completions(int read)$/;"	f
spdk_wait_io	storage/storage_spdk.c	/^int spdk_wait_io(uint8_t dev, int read) $/;"	f
spdk_write	storage/storage_spdk.c	/^int spdk_write(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size)$/;"	f
start	global/ncx_slab.h	/^	u_char *start;$/;"	m	struct:__anon14
start	storage/spdk/async.c	/^	uint64_t start, len;$/;"	m	struct:spdk_async_io	file:
state	concurrency/synchronization.h	/^	struct state {$/;"	s	union:mlfs_mutex
storage_dax	storage/storage.c	/^struct storage_operations storage_dax = {$/;"	v	typeref:struct:storage_operations
storage_engine	io/device.h	/^	struct storage_operations *storage_engine;$/;"	m	struct:block_device	typeref:struct:block_device::storage_operations
storage_hdd	storage/storage.c	/^struct storage_operations storage_hdd = {$/;"	v	typeref:struct:storage_operations
storage_operations	storage/storage.h	/^struct storage_operations$/;"	s
storage_spdk	storage/storage.c	/^struct storage_operations storage_spdk = {$/;"	v	typeref:struct:storage_operations
store_all_bitmap	balloc.c	/^void store_all_bitmap(uint8_t dev, struct block_bitmap *b_bitmap)$/;"	f
stringize	global/defs.h	69;"	d
submit_bh	io/block_io.c	/^int submit_bh(int is_write, struct buffer_head *bh)$/;"	f
super_block	shared.h	/^struct super_block$/;"	s
sync	slru.h	/^	uint8_t sync;$/;"	m	struct:lru_node
sync_all_buffers	io/block_io.c	/^void sync_all_buffers(struct block_device *bdev)$/;"	f
sync_dirty_buffer	io/block_io.c	/^static int sync_dirty_buffer(struct buffer_head *bh)$/;"	f	file:
sync_inode_from_dinode	shared.h	299;"	d
sync_writeback_buffers	io/block_io.c	/^void sync_writeback_buffers(struct block_device *bdev)$/;"	f
sys_futex	concurrency/synchronization.h	102;"	d
sz	ds/utarray.h	/^    size_t sz;$/;"	m	struct:__anon8
tail	ds/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tbl	ds/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
test_and_change_bit	ds/bitops_arch.h	/^static __always_inline int test_and_change_bit(long nr, volatile unsigned long *addr)$/;"	f
test_and_clear_bit	ds/bitops_arch.h	/^static __always_inline int test_and_clear_bit(long nr, volatile unsigned long *addr)$/;"	f
test_and_set_bit	ds/bitops_arch.h	/^static __always_inline int test_and_set_bit(long nr, volatile unsigned long *addr)$/;"	f
test_and_set_bit_lock	ds/bitops_arch.h	/^test_and_set_bit_lock(long nr, volatile unsigned long *addr)$/;"	f
test_bit	ds/bitops_arch.h	425;"	d
thcount_lock	thpool.c	/^	pthread_mutex_t  thcount_lock;       \/* used for thread count etc *\/$/;"	m	struct:thpool_	file:
thpool_	thpool.c	/^typedef struct thpool_{$/;"	s	file:
thpool_	thpool.c	/^} thpool_;$/;"	t	typeref:struct:thpool_	file:
thpool_add_work	thpool.c	/^int thpool_add_work(thpool_* thpool_p, void (*function_p)(void*), void* arg_p){$/;"	f
thpool_destroy	thpool.c	/^void thpool_destroy(thpool_* thpool_p){$/;"	f
thpool_init	thpool.c	/^struct thpool_* thpool_init(int num_threads){$/;"	f
thpool_num_threads_working	thpool.c	/^int thpool_num_threads_working(thpool_* thpool_p){$/;"	f
thpool_p	thpool.c	/^	struct thpool_* thpool_p;            \/* access to thpool          *\/$/;"	m	struct:thread	typeref:struct:thread::thpool_	file:
thpool_pause	thpool.c	/^void thpool_pause(thpool_* thpool_p) {$/;"	f
thpool_resume	thpool.c	/^void thpool_resume(thpool_* thpool_p) {$/;"	f
thpool_wait	thpool.c	/^void thpool_wait(thpool_* thpool_p){$/;"	f
thread	thpool.c	/^typedef struct thread{$/;"	s	file:
thread	thpool.c	/^} thread;$/;"	t	typeref:struct:thread	file:
thread_destroy	thpool.c	/^static void thread_destroy (thread* thread_p){$/;"	f	file:
thread_do	thpool.c	/^static void* thread_do(struct thread* thread_p){$/;"	f	file:
thread_hold	thpool.c	/^static void thread_hold(int sig_id) {$/;"	f	file:
thread_init	thpool.c	/^static int thread_init (thpool_* thpool_p, struct thread** thread_p, int id){$/;"	f	file:
thread_pool	fs.c	/^threadpool thread_pool;$/;"	v
thread_pool_ssd	fs.c	/^threadpool thread_pool_ssd;$/;"	v
threadpool	thpool.h	/^typedef struct thpool_* threadpool;$/;"	t	typeref:struct:thpool_
threads	thpool.c	/^	thread**   threads;                  \/* pointer to threads        *\/$/;"	m	struct:thpool_	file:
threads_all_idle	thpool.c	/^	pthread_cond_t  threads_all_idle;    \/* signal to thpool_wait     *\/$/;"	m	struct:thpool_	file:
threads_keepalive	thpool.c	/^static volatile int threads_keepalive;$/;"	v	file:
threads_on_hold	thpool.c	/^static volatile int threads_on_hold;$/;"	v	file:
timer_func	concurrency/timer.c	/^static void timer_func(void)$/;"	f	file:
timer_sem	concurrency/timer.c	/^static sem_t timer_sem;		\/\/ semaphore that's signaled if timer signal arrived$/;"	v	file:
timer_stopped	concurrency/timer.c	/^static bool timer_stopped;	\/\/ non-zero if the timer is to be timer_stopped$/;"	v	file:
timer_thread	concurrency/timer.c	/^static pthread_t timer_thread;	\/\/ thread in which user timer functions execute$/;"	v	file:
timersignalhandler	concurrency/timer.c	/^static void timersignalhandler(int sig) $/;"	f	file:
timerthread	concurrency/timer.c	/^static void * timerthread(void *_) $/;"	f	file:
tls_loghdr_meta	concurrency/thread.c	/^__thread struct logheader_meta tls_loghdr_meta;$/;"	v	typeref:struct:logheader_meta
to_dev	fs.c	/^	uint8_t to_dev;$/;"	m	struct:f_digest_worker_arg	file:
total_len	ds/xxhash.h	/^   unsigned long long total_len;$/;"	m	struct:XXH64_state_s
total_len_32	ds/xxhash.h	/^   unsigned total_len_32;$/;"	m	struct:XXH32_state_s
total_migrated_mb	fs.h	/^	uint64_t total_migrated_mb;$/;"	m	struct:mlfs_kernfs_stats
trace	global/ncx_log.h	18;"	d
tree	ds/rbtree_latch.h	/^	struct rb_root	tree[2];$/;"	m	struct:latch_tree_root	typeref:struct:latch_tree_root::rb_root
true	mlfs/kerncompat.h	418;"	d
try_migrate_blocks	migrate.c	/^int try_migrate_blocks(uint8_t from_dev, uint8_t to_dev, uint32_t nr_blocks, uint8_t force)$/;"	f
try_to_drop_buffers	io/block_io.c	/^static void try_to_drop_buffers(struct block_device *bdev)$/;"	f	file:
try_to_perform_io	io/block_io.c	/^static void try_to_perform_io(struct block_device *bdev)$/;"	f	file:
try_to_sync_buffers	io/block_io.c	/^static void try_to_sync_buffers(struct block_device *bdev)$/;"	f	file:
trylock_buffer	io/block_io.h	/^static inline int trylock_buffer(struct buffer_head *bh)$/;"	f
type	fs.c	/^	uint8_t type;$/;"	m	struct:d_replay_key	file:
type	shared.h	/^	uint8_t type[g_max_blocks_per_operation];$/;"	m	struct:logheader
u	concurrency/synchronization.h	/^	uint32_t u;$/;"	m	union:mlfs_mutex
u16	mlfs/kerncompat.h	/^typedef unsigned short u16;$/;"	t
u32	ds/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	m	union:__anon7	file:
u32	ds/xxhash.c	/^typedef union { U32 u32; } __attribute__((packed)) unalign;$/;"	m	union:__anon4	file:
u32	mlfs/kerncompat.h	/^typedef unsigned int u32;$/;"	t
u64	ds/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	m	union:__anon7	file:
u64	mlfs/kerncompat.h	/^typedef unsigned long long u64;$/;"	t
u8	mlfs/kerncompat.h	/^typedef unsigned char u8;$/;"	t
u_char	global/ncx_core.h	/^typedef unsigned char u_char;$/;"	t
u_digest_hash	fs.c	/^	u_replay_t *u_digest_hash;$/;"	m	struct:replay_list	file:
u_replay_t	fs.c	/^} u_replay_t;$/;"	t	typeref:struct:unlink_replay	file:
uchar	global/types.h	/^typedef unsigned char	uchar;$/;"	t
uint	global/types.h	/^typedef unsigned int	uint;$/;"	t
uint16_t	global/types.h	/^typedef unsigned short	uint16_t;$/;"	t
uint32_t	ds/uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	global/types.h	/^typedef unsigned int	uint32_t;$/;"	t
uint64_t	global/types.h	/^typedef unsigned long int uint64_t;$/;"	t
uint8_t	ds/uthash.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	global/types.h	/^typedef unsigned char	uint8_t;$/;"	t
unalign	ds/xxhash.c	/^typedef union { U32 u32; } __attribute__((packed)) unalign;$/;"	t	typeref:union:__anon4	file:
unalign64	ds/xxhash.c	/^typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign64;$/;"	t	typeref:union:__anon7	file:
unlikely	mlfs/kerncompat.h	459;"	d
unlink_replay	fs.c	/^typedef struct unlink_replay {$/;"	s	file:
unlock_buffer	io/block_io.h	/^static inline void unlock_buffer(struct buffer_head *bh)$/;"	f
update_slru_list_from_digest	migrate.c	/^int update_slru_list_from_digest(uint8_t dev, lru_key_t k, lru_val_t v)$/;"	f
upper_power_of_two	storage/spdk/common.c	/^unsigned long upper_power_of_two(unsigned int v) {$/;"	f
used_blocks	shared.h	/^	uint64_t used_blocks;$/;"	m	struct:super_block
used_pct	global/ncx_slab.h	/^	size_t pool_size, used_size, used_pct;$/;"	m	struct:__anon15
used_size	global/ncx_slab.h	/^	size_t pool_size, used_size, used_pct;$/;"	m	struct:__anon15
user_arg	storage/spdk/async.c	/^	void* user_arg;$/;"	m	struct:spdk_async_io	file:
user_arg	storage/spdk/sync.h	/^	void* user_arg;$/;"	m	struct:spdk_sync_io
user_cb	storage/spdk/async.c	/^	void(* user_cb)(void*);$/;"	m	struct:spdk_async_io	file:
user_cb	storage/spdk/sync.h	/^	void(* user_cb)(void*);$/;"	m	struct:spdk_sync_io
ushort	global/types.h	/^typedef unsigned short	ushort;$/;"	t
utarray_back	ds/utarray.h	221;"	d
utarray_clear	ds/utarray.h	200;"	d
utarray_concat	ds/utarray.h	177;"	d
utarray_done	ds/utarray.h	66;"	d
utarray_eltidx	ds/utarray.h	222;"	d
utarray_eltptr	ds/utarray.h	120;"	d
utarray_erase	ds/utarray.h	181;"	d
utarray_extend_back	ds/utarray.h	111;"	d
utarray_find	ds/utarray.h	216;"	d
utarray_free	ds/utarray.h	85;"	d
utarray_front	ds/utarray.h	218;"	d
utarray_init	ds/utarray.h	61;"	d
utarray_insert	ds/utarray.h	123;"	d
utarray_inserta	ds/utarray.h	135;"	d
utarray_len	ds/utarray.h	118;"	d
utarray_new	ds/utarray.h	79;"	d
utarray_next	ds/utarray.h	219;"	d
utarray_pop_back	ds/utarray.h	106;"	d
utarray_prev	ds/utarray.h	220;"	d
utarray_push_back	ds/utarray.h	100;"	d
utarray_renew	ds/utarray.h	195;"	d
utarray_reserve	ds/utarray.h	90;"	d
utarray_resize	ds/utarray.h	156;"	d
utarray_sort	ds/utarray.h	212;"	d
utarray_str_cpy	ds/utarray.h	/^static void utarray_str_cpy(void *dst, const void *src) {$/;"	f
utarray_str_dtor	ds/utarray.h	/^static void utarray_str_dtor(void *elt) {$/;"	f
uthash_expand_fyi	ds/uthash.h	111;"	d
uthash_fatal	ds/uthash.h	90;"	d
uthash_free	ds/uthash.h	98;"	d
uthash_malloc	ds/uthash.h	94;"	d
uthash_memcmp	ds/uthash.h	104;"	d
uthash_noexpand_fyi	ds/uthash.h	108;"	d
uthash_strlen	ds/uthash.h	101;"	d
v	thpool.c	/^	int v;$/;"	m	struct:bsem	file:
v1	ds/xxhash.h	/^   unsigned long long v1;$/;"	m	struct:XXH64_state_s
v1	ds/xxhash.h	/^   unsigned v1;$/;"	m	struct:XXH32_state_s
v2	ds/xxhash.h	/^   unsigned long long v2;$/;"	m	struct:XXH64_state_s
v2	ds/xxhash.h	/^   unsigned v2;$/;"	m	struct:XXH32_state_s
v3	ds/xxhash.h	/^   unsigned long long v3;$/;"	m	struct:XXH64_state_s
v3	ds/xxhash.h	/^   unsigned v3;$/;"	m	struct:XXH32_state_s
v4	ds/xxhash.h	/^   unsigned long long v4;$/;"	m	struct:XXH64_state_s
v4	ds/xxhash.h	/^   unsigned v4;$/;"	m	struct:XXH32_state_s
val	slru.h	/^	lru_val_t val;$/;"	m	struct:lru_node
variable_test_bit	ds/bitops_arch.h	/^static __always_inline int variable_test_bit(long nr, volatile const unsigned long *addr)$/;"	f
ver	fs.c	/^	uint16_t ver;$/;"	m	struct:d_replay_key	file:
ver	fs.c	/^	uint16_t ver;$/;"	m	struct:replay_node_key	file:
wait_for_event	fs.c	/^static void wait_for_event(void)$/;"	f	file:
wait_io	storage/storage.h	/^	int (*wait_io)(uint8_t dev, int isread);$/;"	m	struct:storage_operations
wait_on_buffer	io/block_io.c	/^void wait_on_buffer(struct buffer_head *bh, int isread)$/;"	f
wb_threshold	migrate.c	/^static int wb_threshold[g_n_devices + 1] = {0, 60, 80, 100, 0};$/;"	v	file:
write	storage/storage.h	/^	int (*write)(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t io_size);$/;"	m	struct:storage_operations
write_buffer	storage/spdk/async.c	/^static uint8_t *write_buffer;$/;"	v	file:
write_buffer_pointer	storage/spdk/async.c	/^static uint32_t write_buffer_pointer = 0;$/;"	v	file:
write_dirty_buffer	io/block_io.c	/^int write_dirty_buffer(struct buffer_head *bh)$/;"	f
write_issued	storage/spdk/async.c	/^	unsigned int write_issued;$/;"	m	struct:spdk_async_data	file:
write_ondisk_inode	inode.c	/^int write_ondisk_inode(uint8_t dev, struct inode *ip)$/;"	f
write_unaligned	storage/storage.h	/^	int (*write_unaligned)(uint8_t dev, uint8_t *buf, addr_t blockno, uint32_t offset,$/;"	m	struct:storage_operations
x	mlfs/kerncompat.h	/^struct __una_u16 { __le16 x; } __attribute__((__packed__));$/;"	m	struct:__una_u16
x	mlfs/kerncompat.h	/^struct __una_u32 { __le32 x; } __attribute__((__packed__));$/;"	m	struct:__una_u32
x	mlfs/kerncompat.h	/^struct __una_u64 { __le64 x; } __attribute__((__packed__));$/;"	m	struct:__una_u64
xchg_16	concurrency/synchronization.h	/^static inline unsigned short xchg_16(void *ptr, unsigned short x)$/;"	f
xchg_32	concurrency/synchronization.h	/^static inline unsigned xchg_32(void *ptr, unsigned x)$/;"	f
xchg_64	concurrency/synchronization.h	/^static inline void *xchg_64(void *ptr, void *x)$/;"	f
xchg_8	concurrency/synchronization.h	/^static inline unsigned char xchg_8(void *ptr, unsigned char x)$/;"	f
